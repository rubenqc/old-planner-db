{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","AgentStub","db","sandbox","id","uuid","username","uuidArgs","where","connectedArgs","connected","usernameArgs","newAgent","name","hostname","pid","beforeEach","createSandbox","hasMany","create","stub","withArgs","returns","Promise","resolve","toJSON","findOne","findByUuid","findById","update","findAll","all","ruben","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice","agents","is","length","findConnected","findByUsername"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\nlet id = 1\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet username = 'ruben'\r\n\r\nlet uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\nlet connectedArgs = {\r\n  where: {\r\n    connected: true\r\n  }\r\n}\r\n\r\nlet usernameArgs = {\r\n  where: {\r\n    username,\r\n    connected: true\r\n  }\r\n}\r\n\r\nlet newAgent = {\r\n  uuid: '123-123-123',\r\n  name: 'test',\r\n  username: 'test',\r\n  hostname: 'test',\r\n  pid: 0,\r\n  connected: false\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  // Agent#Model create Stub\r\n  AgentStub.create = sandbox.stub()\r\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\r\n    toJSON () { return newAgent }\r\n  }))\r\n\r\n  // Agent#Model findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.findByUuid(uuid)))\r\n\r\n  // Agent#Model findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.findById(id)))\r\n\r\n  // Agent#Model update Stub\r\n  AgentStub.update = sandbox.stub()\r\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n\r\n  // Agent#Model findAll Stub\r\n  AgentStub.findAll = sandbox.stub()\r\n  AgentStub.findAll.returns(Promise.resolve(agentFixtures.all))\r\n  AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\r\n  AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.ruben))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist.')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed') // estas propiedades nos la ha entregado sinon\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument needs should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument needs should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findMyId should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\r\n\r\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate - exists', async t => {\r\n  let agent = await db.Agent.createOrUpdate(single)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledTwice, 'findOne should be called twice')\r\n  t.true(AgentStub.update.called, 'update should be called on modal')\r\n  t.true(AgentStub.update.calledOnce, 'update should be called once')\r\n\r\n  t.deepEqual(agent, single, 'agent should be the same')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate - new', async t => {\r\n  let agent = await db.Agent.createOrUpdate(newAgent)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n  t.true(AgentStub.findOne.calledWith({\r\n    where: {\r\n      uuid: newAgent.uuid\r\n    }\r\n  }), 'findOne should be called with uuid args')\r\n  t.true(AgentStub.create.called, 'create should be called on modal')\r\n  t.true(AgentStub.create.calledOnce, 'create should be called once')\r\n  t.true(AgentStub.create.calledWith(newAgent), 'create should be called with object args')\r\n\r\n  t.deepEqual(agent, newAgent, 'agent should be the same')\r\n})\r\n\r\ntest.serial('Agent#findByUuid', async t => {\r\n  let agent = await db.Agent.findByUuid(uuid)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n\r\n  t.deepEqual(agent, agentFixtures.findByUuid(uuid), 'agent should be the same')\r\n})\r\n\r\ntest.serial('Agent#findAll', async t => {\r\n  let agents = await db.Agent.findAll()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\r\n\r\n  t.is(agents.length, agentFixtures.all.length, 'agents should be the same')\r\n  t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\r\n})\r\n\r\ntest.serial('Agent#findConnected', async t => {\r\n  let agents = await db.Agent.findConnected()\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with conneted args')\r\n\r\n  t.is(agents.length, agentFixtures.connected.length, ' agents should be the same')\r\n  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\r\n})\r\n\r\ntest.serial('Agent#findByUsername', async t => {\r\n  let agents = await db.Agent.findByUsername(username)\r\n\r\n  t.true(AgentStub.findAll.called, 'findAll should be called')\r\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')\r\n\r\n  t.is(agents.length, agentFixtures.ruben.length, 'agents should be the same')\r\n  t.deepEqual(agents, agentFixtures.ruben, 'agents should be the same')\r\n})\r\n"]}