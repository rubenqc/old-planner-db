{"version":3,"sources":["tests/datacenter-tests.js"],"names":["test","require","sinon","proxyquire","datacenterFixtures","datacenterMainFixtures","config","logging","db","sandbox","DatacenterMainStub","DatacenterStub","DateStub","hasMany","spy","DatacenterStubTypeStub","belongsTo","ClassStub","RegionStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","datacenterMainId","condMainArgs","where","dc_principal","datacenterId","single","datacenter","condDatacenterArgs","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","update","setupDatabase","TypeStub","afterEach","restore","t","truthy","Datacenter","true","called","calledOnce","calledWith","serial","createOrUpdate","condArgs","tipo","typeFixtures","deepEqual"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst datacenterFixtures = require('./fixtures/datacenter')\nconst datacenterMainFixtures = require('./fixtures/datacenterMain')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DatacenterMainStub = null\nlet DatacenterStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet DatacenterStubTypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet datacenterMainId = 1\nlet condMainArgs = {\n  where: {\n    dc_principal: datacenterMainId\n  }\n}\n\nlet datacenterId = datacenterFixtures.single.datacenter\nlet condDatacenterArgs = {\n  where: {\n    datacenter: datacenterId\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DatacenterStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  DatacenterMainStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  DatacenterMainStub.findOne = sandbox.stub()\n  DatacenterMainStub.findOne.withArgs(condMainArgs).returns(Promise.resolve(datacenterMainFixtures.single))\n  //   DatacenterMainStub.findOne.withArgs(newCondClass).returns(Promise.resolve(classFixtures.findByClass(newClassId)))\n  // Type#Model findOne Stub\n  DatacenterStub.findOne = sandbox.stub()\n  DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))\n  // Type#Model update Stub\n  DatacenterStub.update = sandbox.stub()\n  DatacenterStub.update.withArgs(datacenterFixtures.single, condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Datacenter', t => {\n  t.truthy(db.Datacenter, 'Datacenter service should exist')\n})\n\ntest('Setup', t => {\n  t.true(DatacenterStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(DatacenterStub.hasMany.calledOnce, 'hasMany should be called once')\n  t.true(DatacenterStub.hasMany.calledWith(RegionStub), 'Argument needs should be the RegionModel args')\n  t.true(DatacenterStub.belongsTo.called, 'TypeModel.belongsTo was executed')\n  t.true(DatacenterStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(DatacenterStub.belongsTo.calledWith(DatacenterMainStub), 'TypeModel.belongsTo should be called with DatacenterMainModel args')\n})\n\ntest.serial('Datacenter#createOrUpdate - exist', async t => {\n  const datacenter = await db.Datacenter.createOrUpdate(datacenterFixtures.single, datacenterMainId)\n\n  t.true(DatacenterMainStub.findOne.called, 'ClassModel.findOne was execute')\n  t.true(DatacenterMainStub.findOne.calledOnce, ' findOne should be called once')\n  t.true(DatacenterMainStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')\n  t.true(DatacenterStub.findOne.called, 'TypeModel.findOne was execute')\n  t.true(DatacenterStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(DatacenterStub.findOne.calledWith({ where: { tipo: typeFixtures.single.tipo } }), 'findOne should be called with tipo Args')\n  t.true(DatacenterStub.update.called, 'update should be called')\n  t.true(DatacenterStub.update.calledOnce, 'update should be called once')\n  t.true(DatacenterStub.update.calledWith(typeFixtures.single, { where: { tipo: typeFixtures.single.tipo } }), 'update should be called with single, cond Args')\n\n  t.deepEqual(datacenter, datacenterFixtures.single, 'should be the same')\n})\n"]}