{"version":3,"sources":["tests/class-tests.js"],"names":["test","require","sinon","proxyquire","dateFixtures","single","Object","assign","config","logging","db","sandbox","ClassStub","TypeStub","belongsTo","spy","hasMany","DateStub","RegionStub","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","fecha","dateArgs","where","newDate","id","beforeEach","createSandbox","setupDatabase","afterEach","restore","t","truthy","ClassClase"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst dateFixtures = require('./fixtures/date')\n\nlet single = Object.assign({}, dateFixtures.single)\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet ClassStub = null\n\n// general\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet fecha = '2018-05-01'\nlet dateArgs = {\n  where: {\n    fecha\n  }\n}\nlet newDate = {\n  id: 8,\n  fecha: '2017-06-07'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  ClassStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Date', t => {\n  t.truthy(db.ClassClase, 'Date service should exists.')\n})\n\n"]}