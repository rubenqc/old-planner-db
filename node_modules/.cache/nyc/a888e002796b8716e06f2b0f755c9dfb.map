{"version":3,"sources":["tests/datacenterMain-tests.js"],"names":["test","require","sinon","proxyquire","datacenterMainFixtures","config","logging","db","sandbox","DatacenterMainStub","DateStub","hasMany","spy","ClassStub","RegionStub","belongsTo","DatacenterStub","TypeStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","condArgs","where","dc_principal","single","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","setupDatabase","afterEach","restore","t","truthy","DatacenterMain","serial","datacenterMain","createOrUpdate","deepEqual"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst datacenterMainFixtures = require('./fixtures/datacenterMain')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DatacenterMainStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet TypeStub = {\n  hasMany: sinon.spy(),\n  belongsTo: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet condArgs = {\n  where: {\n    dc_principal: datacenterMainFixtures.single.dc_principal\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DatacenterMainStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // DatacenterMain#Model findOne Stub\n  DatacenterMainStub.findOne = sandbox.stub()\n  DatacenterMainStub.findOne.withArgs(condArgs).returns(Promise.resolve(datacenterMainFixtures.single))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('DatacenterMain', t => {\n  t.truthy(db.DatacenterMain, 'Type service should exist')\n})\n\ntest.serial('DatacenterMain#createOrUpdate - exist', async t => {\n  let datacenterMain = db.DatacenterMain.createOrUpdate(datacenterMainFixtures.single)\n\n  t.deepEqual(datacenterMain, datacenterMainFixtures.single, 'should be the same')\n})\n"]}