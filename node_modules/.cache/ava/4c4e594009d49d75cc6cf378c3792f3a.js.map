{"version":3,"sources":["tests/type-test.js"],"names":["test","require","sinon","proxyquire","typeFixtures","classFixtures","config","logging","db","sandbox","TypeStub","ClassStub","DateStub","hasMany","spy","RegionStub","belongsTo","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","newClassId","newClassArgs","where","clase","condArgs","single","claseId","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","findByClass","setupDatabase","afterEach","restore","t","truthy","Type","true","called","calledTwice","calledWith","calledOnce","serial","type","createOrUpdate","deepEqual"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst typeFixtures = require('./fixtures/type')\nconst classFixtures = require('./fixtures/class')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet TypeStub = null\nlet ClassStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet newClassId = 3\nlet newClassArgs = {\n  where: {\n    clase: newClassId\n  }\n}\nlet condArgs = {\n  where: { clase: typeFixtures.single.claseId }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  TypeStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  ClassStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  ClassStub.findOne = sandbox.stub()\n  ClassStub.findOne.withArgs(newClassArgs).returns(Promise.resolve(classFixtures.findByClass(newClassId)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Type', t => {\n  t.truthy(db.Type, 'Type service should exist')\n})\n\ntest('Setup', t => {\n  t.true(TypeStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(TypeStub.hasMany.calledTwice, 'hasMany should be called twice')\n  t.true(TypeStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n  t.true(TypeStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n  t.true(TypeStub.belongsTo.called, 'TypeModel.belongsTo was executed')\n  t.true(TypeStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(TypeStub.belongsTo.calledWith(ClassStub), 'TypeModel.belongsTo should be called with ClassStub args')\n})\n\ntest.serial('Type#createOrUpdate - no exist class', async t => {\n  const type = await db.Type.createOrUpdate(typeFixtures.single, newClassId)\n\n  t.deepEqual(type, typeFixtures.single, 'should be the same')\n})\n"]}