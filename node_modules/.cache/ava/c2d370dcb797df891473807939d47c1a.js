'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const datacenterMainFixtures = require('./fixtures/datacenterMain');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let DatacenterMainStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let ClassStub = {
  hasMany: sinon.spy()
};
let RegionStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let TypeStub = {
  hasMany: sinon.spy(),
  belongsTo: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy()
};
let condArgs = {
  where: {
    dc_principal: datacenterMainFixtures.single.dc_principal
  }
};
let newDatacenterMain = {
  dc_principal: 4,
  nombre: 'villa el salvador'
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  DatacenterMainStub = {
    hasMany: sandbox.spy() // DatacenterMain#Model findOne Stub

  };
  DatacenterMainStub.findOne = sandbox.stub();
  DatacenterMainStub.findOne.withArgs(condArgs).returns(Promise.resolve(datacenterMainFixtures.single)); // DatacenterMain#Model update Stub

  DatacenterMainStub.update = sandbox.stub();
  DatacenterMainStub.update.withArgs(datacenterMainFixtures.single, condArgs).returns(Promise.resolve(datacenterMainFixtures.single)); // DatacenterMain#Model create Stub

  DatacenterMainStub.create = sandbox.stub();
  DatacenterMainStub.create.withArgs(newDatacenterMain).returns(Promise.resolve({
    toJSON() {
      return newDatacenterMain;
    }

  }));
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('DatacenterMain', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").DatacenterMain, "arguments/0"), {
    content: "t.truthy(db.DatacenterMain, 'Type service should exist')",
    filepath: "tests/datacenterMain-tests.js",
    line: 154,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"DatacenterMain\",\"range\":[12,26]},\"computed\":false,\"range\":[9,26]},{\"type\":\"StringLiteral\",\"value\":\"Type service should exist\",\"range\":[28,55]}],\"range\":[0,56]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMain\",\"range\":[12,26]},{\"type\":{\"label\":\",\"},\"range\":[26,27]},{\"type\":{\"label\":\"string\"},\"value\":\"Type service should exist\",\"range\":[28,55]},{\"type\":{\"label\":\")\"},\"range\":[55,56]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Type service should exist');
});
test.serial('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(DatacenterMainStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.hasMany.called, 'DatacenterMainModel.hasMany was execute')",
    filepath: "tests/datacenterMain-tests.js",
    line: 158,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMainModel.hasMany was execute\",\"range\":[42,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMainModel.hasMany was execute\",\"range\":[42,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMainModel.hasMany was execute');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(DatacenterMainStub, "arguments/0/object/object").hasMany, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.hasMany.calledOnce, 'hasMany should be called once')",
    filepath: "tests/datacenterMain-tests.js",
    line: 159,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called once\",\"range\":[46,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[34,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called once\",\"range\":[46,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called once');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(DatacenterMainStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(DatacenterStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.hasMany.calledWith(DatacenterStub), 'hasMany should be called with DatacenterModel args')",
    filepath: "tests/datacenterMain-tests.js",
    line: 160,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[45,59]}],\"range\":[7,60]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called with DatacenterModel args\",\"range\":[62,114]}],\"range\":[0,115]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[34,44]},{\"type\":{\"label\":\"(\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[45,59]},{\"type\":{\"label\":\")\"},\"range\":[59,60]},{\"type\":{\"label\":\",\"},\"range\":[60,61]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called with DatacenterModel args\",\"range\":[62,114]},{\"type\":{\"label\":\")\"},\"range\":[114,115]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called with DatacenterModel args');
});
test.serial('DatacenterMain#createOrUpdate - exist', async t => {
  var _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  let datacenterMain = await db.DatacenterMain.createOrUpdate(datacenterMainFixtures.single);
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.called, 'findOne should be called on model')",
    filepath: "tests/datacenterMain-tests.js",
    line: 166,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called on model\",\"range\":[42,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called on model\",\"range\":[42,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledTwice, 'findOne should be called twice')",
    filepath: "tests/datacenterMain-tests.js",
    line: 167,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[34,45]},\"computed\":false,\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called twice\",\"range\":[47,79]}],\"range\":[0,80]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[34,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called twice\",\"range\":[47,79]},{\"type\":{\"label\":\")\"},\"range\":[79,80]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called twice');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(DatacenterMainStub, "arguments/0/object/object").update, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.update.called, 'update should be called on modal')",
    filepath: "tests/datacenterMain-tests.js",
    line: 168,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[33,39]},\"computed\":false,\"range\":[7,39]},{\"type\":\"StringLiteral\",\"value\":\"update should be called on modal\",\"range\":[41,75]}],\"range\":[0,76]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[26,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[33,39]},{\"type\":{\"label\":\",\"},\"range\":[39,40]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called on modal\",\"range\":[41,75]},{\"type\":{\"label\":\")\"},\"range\":[75,76]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called on modal');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(DatacenterMainStub, "arguments/0/object/object").update, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.update.calledOnce, 'update should be called once')",
    filepath: "tests/datacenterMain-tests.js",
    line: 169,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[33,43]},\"computed\":false,\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"update should be called once\",\"range\":[45,75]}],\"range\":[0,76]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[26,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[33,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called once\",\"range\":[45,75]},{\"type\":{\"label\":\")\"},\"range\":[75,76]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called once');
  t.deepEqual(datacenterMain, datacenterMainFixtures.single, 'should be the same');
});
test.serial('DatacenterMain#createOrUpdate - new', async t => {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder();

  let datacenterMain = await db.DatacenterMain.createOrUpdate(newDatacenterMain);
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.called, 'findOne should be called on model')",
    filepath: "tests/datacenterMain-tests.js",
    line: 177,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called on model\",\"range\":[42,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called on model\",\"range\":[42,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledOnce, 'findOne should be called once')",
    filepath: "tests/datacenterMain-tests.js",
    line: 178,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called once\",\"range\":[46,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[34,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called once\",\"range\":[46,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(DatacenterMainStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec11._capt({
    where: _rec11._capt({
      dc_principal: _rec11._capt(_rec11._capt(newDatacenterMain, "arguments/0/arguments/0/properties/0/value/properties/0/value/object").dc_principal, "arguments/0/arguments/0/properties/0/value/properties/0/value")
    }, "arguments/0/arguments/0/properties/0/value")
  }, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledWith({ where: { dc_principal: newDatacenterMain.dc_principal } }), 'findOne should be called with cond args')",
    filepath: "tests/datacenterMain-tests.js",
    line: 179,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},\"arguments\":[{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"where\",\"range\":[47,52]},\"value\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"dc_principal\",\"range\":[56,68]},\"value\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"newDatacenterMain\",\"range\":[70,87]},\"property\":{\"type\":\"Identifier\",\"name\":\"dc_principal\",\"range\":[88,100]},\"computed\":false,\"range\":[70,100]},\"computed\":false,\"shorthand\":false,\"range\":[56,100]}],\"range\":[54,102]},\"computed\":false,\"shorthand\":false,\"range\":[47,102]}],\"range\":[45,104]}],\"range\":[7,105]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with cond args\",\"range\":[107,148]}],\"range\":[0,149]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[34,44]},{\"type\":{\"label\":\"(\"},\"range\":[44,45]},{\"type\":{\"label\":\"{\"},\"range\":[45,46]},{\"type\":{\"label\":\"name\"},\"value\":\"where\",\"range\":[47,52]},{\"type\":{\"label\":\":\"},\"range\":[52,53]},{\"type\":{\"label\":\"{\"},\"range\":[54,55]},{\"type\":{\"label\":\"name\"},\"value\":\"dc_principal\",\"range\":[56,68]},{\"type\":{\"label\":\":\"},\"range\":[68,69]},{\"type\":{\"label\":\"name\"},\"value\":\"newDatacenterMain\",\"range\":[70,87]},{\"type\":{\"label\":\".\"},\"range\":[87,88]},{\"type\":{\"label\":\"name\"},\"value\":\"dc_principal\",\"range\":[88,100]},{\"type\":{\"label\":\"}\"},\"range\":[101,102]},{\"type\":{\"label\":\"}\"},\"range\":[103,104]},{\"type\":{\"label\":\")\"},\"range\":[104,105]},{\"type\":{\"label\":\",\"},\"range\":[105,106]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with cond args\",\"range\":[107,148]},{\"type\":{\"label\":\")\"},\"range\":[148,149]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with cond args');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(DatacenterMainStub, "arguments/0/object/object").create, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.create.called, 'create should be called on model')",
    filepath: "tests/datacenterMain-tests.js",
    line: 184,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[33,39]},\"computed\":false,\"range\":[7,39]},{\"type\":\"StringLiteral\",\"value\":\"create should be called on model\",\"range\":[41,75]}],\"range\":[0,76]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[26,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[33,39]},{\"type\":{\"label\":\",\"},\"range\":[39,40]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called on model\",\"range\":[41,75]},{\"type\":{\"label\":\")\"},\"range\":[75,76]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called on model');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(DatacenterMainStub, "arguments/0/object/object").create, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.create.calledOnce, 'create should be called once')",
    filepath: "tests/datacenterMain-tests.js",
    line: 185,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[33,43]},\"computed\":false,\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"create should be called once\",\"range\":[45,75]}],\"range\":[0,76]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[26,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[33,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called once\",\"range\":[45,75]},{\"type\":{\"label\":\")\"},\"range\":[75,76]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(DatacenterMainStub, "arguments/0/callee/object/object").create, "arguments/0/callee/object").calledWith(_rec14._capt(newDatacenterMain, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.create.calledWith(newDatacenterMain), 'create should be called with newDate args')",
    filepath: "tests/datacenterMain-tests.js",
    line: 186,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[33,43]},\"computed\":false,\"range\":[7,43]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newDatacenterMain\",\"range\":[44,61]}],\"range\":[7,62]},{\"type\":\"StringLiteral\",\"value\":\"create should be called with newDate args\",\"range\":[64,107]}],\"range\":[0,108]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[26,32]},{\"type\":{\"label\":\".\"},\"range\":[32,33]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[33,43]},{\"type\":{\"label\":\"(\"},\"range\":[43,44]},{\"type\":{\"label\":\"name\"},\"value\":\"newDatacenterMain\",\"range\":[44,61]},{\"type\":{\"label\":\")\"},\"range\":[61,62]},{\"type\":{\"label\":\",\"},\"range\":[62,63]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called with newDate args\",\"range\":[64,107]},{\"type\":{\"label\":\")\"},\"range\":[107,108]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with newDate args');
  t.deepEqual(datacenterMain, newDatacenterMain, 'should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/c2d370dcb797df891473807939d47c1a.js.map