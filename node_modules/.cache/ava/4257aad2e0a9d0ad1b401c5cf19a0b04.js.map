{"version":3,"sources":["tests/datacenterMain-tests.js"],"names":["test","require","sinon","proxyquire","datacenterMainFixtures","config","logging","db","sandbox","DatacenterMainStub","DateStub","hasMany","spy","ClassStub","RegionStub","belongsTo","DatacenterStub","TypeStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","condArgs","where","dc_principal","single","newDatacenterMain","nombre","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","update","create","toJSON","findAll","setupDatabase","afterEach","restore","t","truthy","DatacenterMain","serial","true","called","calledOnce","calledWith","datacenterMain","createOrUpdate","calledTwice","deepEqual","datacentersMain"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst datacenterMainFixtures = require('./fixtures/datacenterMain')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DatacenterMainStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet TypeStub = {\n  hasMany: sinon.spy(),\n  belongsTo: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet condArgs = {\n  where: {\n    dc_principal: datacenterMainFixtures.single.dc_principal\n  }\n}\n\nlet newDatacenterMain = {\n  dc_principal: 4,\n  nombre: 'villa el salvador'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DatacenterMainStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // DatacenterMain#Model findOne Stub\n  DatacenterMainStub.findOne = sandbox.stub()\n  DatacenterMainStub.findOne.withArgs(condArgs).returns(Promise.resolve(datacenterMainFixtures.single))\n\n  // DatacenterMain#Model update Stub\n  DatacenterMainStub.update = sandbox.stub()\n  DatacenterMainStub.update.withArgs(datacenterMainFixtures.single, condArgs).returns(Promise.resolve(datacenterMainFixtures.single))\n\n  // DatacenterMain#Model create Stub\n  DatacenterMainStub.create = sandbox.stub()\n  DatacenterMainStub.create.withArgs(newDatacenterMain).returns(Promise.resolve({\n    toJSON () {\n      return newDatacenterMain\n    }\n  }))\n\n   // DatacenterMain#Model findAll Stub\n   DatacenterMainStub.findAll = sandbox.stub()\n   DatacenterMainStub.findAll.withArgs().returns(Promise.resolve(datacenterMainFixtures.findAll))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('DatacenterMain', t => {\n  t.truthy(db.DatacenterMain, 'Type service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(DatacenterMainStub.hasMany.called, 'DatacenterMainModel.hasMany was execute')\n  t.true(DatacenterMainStub.hasMany.calledOnce, 'hasMany should be called once')\n  t.true(DatacenterMainStub.hasMany.calledWith(DatacenterStub), 'hasMany should be called with DatacenterModel args')\n})\n\ntest.serial('DatacenterMain#createOrUpdate - exist', async t => {\n  let datacenterMain = await db.DatacenterMain.createOrUpdate(datacenterMainFixtures.single)\n\n  t.true(DatacenterMainStub.findOne.called, 'findOne should be called on model')\n  t.true(DatacenterMainStub.findOne.calledTwice, 'findOne should be called twice')\n  t.true(DatacenterMainStub.update.called, 'update should be called on modal')\n  t.true(DatacenterMainStub.update.calledOnce, 'update should be called once')\n\n  t.deepEqual(datacenterMain, datacenterMainFixtures.single, 'should be the same')\n})\n\ntest.serial('DatacenterMain#createOrUpdate - new', async t => {\n  let datacenterMain = await db.DatacenterMain.createOrUpdate(newDatacenterMain)\n\n  t.true(DatacenterMainStub.findOne.called, 'findOne should be called on model')\n  t.true(DatacenterMainStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(DatacenterMainStub.findOne.calledWith({\n    where: {\n      dc_principal: newDatacenterMain.dc_principal\n    }\n  }), 'findOne should be called with cond args')\n  t.true(DatacenterMainStub.create.called, 'create should be called on model')\n  t.true(DatacenterMainStub.create.calledOnce, 'create should be called once')\n  t.true(DatacenterMainStub.create.calledWith(newDatacenterMain), 'create should be called with newDate args')\n\n  t.deepEqual(datacenterMain, newDatacenterMain, 'should be the same')\n})\n\ntest.serial('DatacenterMain#findAll', async t => {\n    let datacentersMain = await db.datacenterMain.findAll()\n  \n    // t.true(DatacenterMainStub.findAll.called, 'findAll should be called on model')\n    // t.true(DatacenterMainStub.findAll.calledOnce, 'findAll should be called once')\n    // t.true(DatacenterMainStub.findAll.calledWith(), 'findAll should be called without args')\n  \n    t.deepEqual(datacentersMain, datacenterMainFixtures.findAll(), 'datacentersMain should be the same')\n  })\n"]}