{"version":3,"sources":["tests/general/date-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","db","sandbox","DateStub","TypeStub","belongsTo","spy","hasMany","ClassStub","RegionStub","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","beforeEach","createSandbox","setupDatabase","afterEach","restore","t","truthy","DateFecha","serial","true","called","times","calledWith"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DateStub = null\n\n// general\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DateStub = {\n    hasMany: sandbox.spy(),\n    beforeEach: sandbox.spy()\n  }\n  const setupDatabase = proxyquire('../../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Date', t => {\n  t.truthy(db.DateFecha, 'Date service should exists.')\n})\n\ntest.serial('Setup', t => {\n    t.true(DateStub.hasMany.called, 'DateModel.hasMany was execute')\n    t.true(DateStub.hasMany.called(14).times, 'hasMany should be called 14 times')\n    t.true(DateStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n    t.true(DateStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n    t.true(DateStub.hasMany.calledWith(GbStub), 'Argument needs should be the GbModel')\n    t.true(DateStub.hasMany.calledWith(CentralizedAnalysisStub), 'Argument needs should be the CentralizedAnlysis')\n    t.true(DateStub.hasMany.calledWith(ThStub), 'Argument needs should be the ThModel')\n    t.true(DateStub.hasMany.calledWith(PdpStub), 'Argument needs should be the PdpModel')\n    t.true(DateStub.hasMany.calledWith(SauStub), 'Argument needs should be the SauModel')\n    t.true(DateStub.hasMany.calledWith(UthStub), 'Argument needs should be the UthModel')\n    t.true(DateStub.hasMany.calledWith(UpdpStub), 'Argument needs should be the UpdpModel')\n    t.true(DateStub.hasMany.calledWith(UsauStub), 'Argument needs should be the UsauModel')\n    t.true(DateStub.hasMany.calledWith(SauUsersStub), 'Argument needs should be the SauUsersModel')\n    t.true(DateStub.hasMany.calledWith(PdpSauStub), 'Argument needs should be the PspSauModel')\n    t.true(DateStub.hasMany.calledWith(ThfcPdpStub), 'Argument needs should be the ThfcPdpModel')\n    t.true(DateStub.hasMany.calledWith(ThfcSauStub), 'Argument needs should be the ThfcSauModel')\n})\n"]}