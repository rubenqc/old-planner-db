{"version":3,"sources":["tests/date-tests.js"],"names":["test","require","sinon","proxyquire","dateFixtures","single","Object","assign","config","logging","db","sandbox","DateStub","TypeStub","belongsTo","spy","hasMany","ClassStub","RegionStub","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","fecha","dateArgs","where","newDate","id","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","findByDate","update","create","toJSON","findAll","all","setupDatabase","afterEach","restore","t","truthy","DateFecha","serial","true","called","callCount","calledWith","date","createOrUpdate","calledTwice","deepEqual","calledOnce","dates"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst dateFixtures = require('./fixtures/date')\n\nlet single = Object.assign({}, dateFixtures.single)\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DateStub = null\n\n// general\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet fecha = '2018-05-01'\nlet dateArgs = {\n  where: {\n    fecha\n  }\n}\nlet newDate = {\n  id: 4,\n  fecha: '2017-06-07',\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DateStub = {\n    hasMany: sandbox.spy(),\n    beforeEach: sandbox.spy()\n  }\n\n  // Date#Model findOne Stub\n  DateStub.findOne = sandbox.stub()\n  DateStub.findOne.withArgs(dateArgs).returns(Promise.resolve(dateFixtures.findByDate(fecha)))\n\n  // Date#Model update Stub\n  DateStub.update = sandbox.stub()\n  DateStub.update.withArgs(single, dateArgs).returns(Promise.resolve(single))\n\n  //Date#Model create Stub\n  DateStub.create = sandbox.stub()\n  DateStub.create.withArgs(newDate).returns(Promise.resolve({\n    toJSON() {\n      return newDate\n    }\n  }))\n\n  //Date#Model findAll Stub\n  DateStub.findAll = sandbox.stub()\n  DateStub.findAll.withArgs().returns(Promise.resolve(dateFixtures.all))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Date', t => {\n  t.truthy(db.DateFecha, 'Date service should exists.')\n})\n\ntest.serial('Setup', t => {\n  t.true(DateStub.hasMany.called, 'DateModel.hasMany was execute')\n  t.true(DateStub.hasMany.callCount === 14, 'hasMany should be called 14 times')\n  t.true(DateStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n  t.true(DateStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n  t.true(DateStub.hasMany.calledWith(GbStub), 'Argument needs should be the GbModel')\n  t.true(DateStub.hasMany.calledWith(CentralizedAnalysisStub), 'Argument needs should be the CentralizedAnlysis')\n  t.true(DateStub.hasMany.calledWith(ThStub), 'Argument needs should be the ThModel')\n  t.true(DateStub.hasMany.calledWith(PdpStub), 'Argument needs should be the PdpModel')\n  t.true(DateStub.hasMany.calledWith(SauStub), 'Argument needs should be the SauModel')\n  t.true(DateStub.hasMany.calledWith(UthStub), 'Argument needs should be the UthModel')\n  t.true(DateStub.hasMany.calledWith(UpdpStub), 'Argument needs should be the UpdpModel')\n  t.true(DateStub.hasMany.calledWith(UsauStub), 'Argument needs should be the UsauModel')\n  t.true(DateStub.hasMany.calledWith(SauUsersStub), 'Argument needs should be the SauUsersModel')\n  t.true(DateStub.hasMany.calledWith(PdpSauStub), 'Argument needs should be the PspSauModel')\n  t.true(DateStub.hasMany.calledWith(ThfcPdpStub), 'Argument needs should be the ThfcPdpModel')\n  t.true(DateStub.hasMany.calledWith(ThfcSauStub), 'Argument needs should be the ThfcSauModel')\n})\n\ntest.serial('Date#createOrUpdate - exists', async t => {\n  let date = await db.DateFecha.createOrUpdate(single)\n\n  t.true(DateStub.findOne.called, 'findOne should be called on model')\n  t.true(DateStub.findOne.calledTwice, 'findOne should be called twice')\n  t.true(DateStub.findOne.calledWith(dateArgs), 'findOne should be called with date args')\n\n  t.deepEqual(date, dateFixtures.findByDate(fecha), 'should be the same')\n})\n\ntest.serial('Date#createOrUpdate - new', async t => {\n  let date = await db.DateFecha.createOrUpdate(newDate)\n\n  t.true(DateStub.findOne.called, 'findOne should be called on model')\n  t.true(DateStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(DateStub.findOne.calledWith({\n    where: {\n      fecha: newDate.fecha\n    }\n  }), 'findOne should be called with cond args')\n  t.true(DateStub.create.called, 'create should be called on model')\n  t.true(DateStub.create.calledOnce, 'create should be called once')\n  t.true(DateStub.create.calledWith(newDate), 'create should be called with newDate args')\n\n  t.deepEqual(date, newDate, 'should be the same')\n})\n\ntest.serial('Date#findAll', async t => {\n  let dates = await db.DateFecha.findAll()\n\n  t.true(DateStub.findAll.called, 'findAll should be called on model')\n  t.true(DateStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(DateStub.findAll.calledWith(), 'findAll should be called without args')\n\n  t.deepEqual(dates, dateFixtures.all, 'dates should be the same')\n})\n\ntest.serial('Date#findByDate', async t => {\n  let date = db.DateFecha.findByDate(fecha)\n\n  t.deepEqual(date, single, 'should be the same')\n})\n"]}