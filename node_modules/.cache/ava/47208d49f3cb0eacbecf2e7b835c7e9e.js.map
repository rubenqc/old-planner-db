{"version":3,"sources":["tests/type-test.js"],"names":["test","require","sinon","proxyquire","typeFixtures","classFixtures","config","logging","db","sandbox","TypeStub","ClassStub","DateStub","hasMany","spy","RegionStub","belongsTo","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","classId","condArgs","where","clase","newType","tipo","nombre","newCondArgs","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","findByClass","single","update","setupDatabase","afterEach","restore","t","truthy","Type","true","called","calledTwice","calledWith","calledOnce","serial","type","createOrUpdate","deepEqual","create"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst typeFixtures = require('./fixtures/type')\nconst classFixtures = require('./fixtures/class')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet TypeStub = null\nlet ClassStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet classId = 1\nlet condArgs = {\n  where: {\n    clase: classId\n  }\n}\n\nnewType = {\n  tipo: 9,\n  nombre: 'no-existes'\n}\nnewCondArgs = {\n  where: {\n    tipo: newType.tipo\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  TypeStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  ClassStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  ClassStub.findOne = sandbox.stub()\n  ClassStub.findOne.withArgs(condArgs).returns(Promise.resolve(classFixtures.findByClass(classId)))\n  // Type#Model findOne Stub\n  TypeStub.findOne = sandbox.stub()\n  TypeStub.findOne.withArgs({where: {tipo: typeFixtures.single.tipo}}).returns(Promise.resolve(typeFixtures.single))\n  // Type#Model update Stub\n  TypeStub.update = sandbox.stub()\n  TypeStub.update.withArgs(typeFixtures.single, condArgs).returns(Promise.resolve(typeFixtures.single))\n\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Type', t => {\n  t.truthy(db.Type, 'Type service should exist')\n})\n\ntest('Setup', t => {\n  t.true(TypeStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(TypeStub.hasMany.calledTwice, 'hasMany should be called twice')\n  t.true(TypeStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n  t.true(TypeStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n  t.true(TypeStub.belongsTo.called, 'TypeModel.belongsTo was executed')\n  t.true(TypeStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(TypeStub.belongsTo.calledWith(ClassStub), 'TypeModel.belongsTo should be called with ClassStub args')\n})\n\ntest.serial('Type#createOrUpdate - exist', async t => {\n  const type = await db.Type.createOrUpdate(typeFixtures.single, classId)\n  \n  t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')\n  t.true(ClassStub.findOne.calledOnce,' findOne should be called once')\n  t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')\n  t.true(TypeStub.findOne.called, 'TypeModel.findOne was execute')\n  t.true(TypeStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(TypeStub.findOne.calledWith({ where: { tipo: typeFixtures.single.tipo} }), 'findOne should be called with tipo Args')\n  t.true(TypeStub.update.called, 'update should be called')\n  t.true(TypeStub.update.calledOnce, 'update should be called once')\n  t.true(TypeStub.update.calledWith(typeFixtures.single, { where: { tipo: typeFixtures.single.tipo} } ), 'update should be called with single, cond Args')\n\n\n  t.deepEqual(type, typeFixtures.single, 'should be the same')\n})\n\n\ntest.serial('Type#createOrUpdate - new', async t => {\n  const type = await db.Type.createOrUpdate(newType, classId)\n\n  t.true(ClassStub.findOne.called, 'findOne should be called')\n  t.true(ClassStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(ClassStub.findOne.calledWith(newCondArgs), 'findOne should be called with newCond Args')\n  t.true(ClassStub.create.called, 'create should be called')\n  t.true(ClassStub.create.calledOnce, 'create should be called once')\n  t.true(ClassStub.create.calledWith(newType), 'create should be called with newClass args')\n\n  t.deepEqual(clase, newType, 'should be the same')\n})"]}