{"version":3,"sources":["tests/datacenter-tests.js"],"names":["test","require","sinon","proxyquire","datacenterFixtures","datacenterMainFixtures","config","logging","db","sandbox","DatacenterMainStub","DatacenterStub","DateStub","hasMany","spy","TypeStub","belongsTo","ClassStub","RegionStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","datacenterMainId","condMainArgs","where","dc_principal","newDatacenterMainId","condNewDatacenterMain","datacenterId","single","datacenter","condDatacenterArgs","newDatacenter","id","nombre","dc_principalId","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","findByDatacenterMain","update","create","toJSON","findAll","attributes","group","include","model","raw","findByDatacenterMainId","setupDatabase","afterEach","restore","t","truthy","Datacenter","true","called","calledOnce","calledWith","serial","createOrUpdate","calledTwice","deepEqual","datacenters"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst datacenterFixtures = require('./fixtures/datacenter')\nconst datacenterMainFixtures = require('./fixtures/datacenterMain')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DatacenterMainStub = null\nlet DatacenterStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet datacenterMainId = 1\nlet condMainArgs = {\n  where: {\n    dc_principal: datacenterMainId\n  }\n}\n\nlet newDatacenterMainId = 5\nlet condNewDatacenterMain = {\n  where: { dc_principal: newDatacenterMainId }\n}\n\nlet datacenterId = datacenterFixtures.single.datacenter\nlet condDatacenterArgs = {\n  where: {\n    datacenter: datacenterId\n  }\n}\n\nlet newDatacenter = {\n  id: 8,\n  nombre: 'lalolalocura',\n  dc_principalId: datacenterMainId\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  DatacenterStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  DatacenterMainStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  DatacenterMainStub.findOne = sandbox.stub()\n  DatacenterMainStub.findOne.withArgs(condMainArgs).returns(Promise.resolve(datacenterMainFixtures.single))\n  DatacenterMainStub.findOne.withArgs(condNewDatacenterMain).returns(Promise.resolve(datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId)))\n  // Type#Model findOne Stub\n  DatacenterStub.findOne = sandbox.stub()\n  DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))\n  // Type#Model update Stub\n  DatacenterStub.update = sandbox.stub()\n  DatacenterStub.update.withArgs(datacenterFixtures.single, condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))\n  // Type#Model create Stub\n  DatacenterStub.create = sandbox.stub()\n  DatacenterStub.create.withArgs(newDatacenter).returns(Promise.resolve({\n    toJSON () {\n      return newDatacenter\n    }\n  }))\n  // Class#Model findAll Stub\n  DatacenterStub.findAll = sandbox.stub()\n  DatacenterStub.findAll.withArgs().returns(Promise.resolve(datacenterFixtures.findAll))\n  DatacenterStub.findAll.withArgs({\n    attributes: ['datacenter', 'nombre'],\n    group: ['datacenter'],\n    include: [{\n      attributes: [],\n      model: DatacenterMainStub,\n      where: {\n        dc_principal: datacenterMainId\n      }\n    }],\n    raw: true\n  }).returns(Promise.resolve(datacenterFixtures.findByDatacenterMainId(datacenterMainId)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Datacenter', t => {\n  t.truthy(db.Datacenter, 'Datacenter service should exist')\n})\n\ntest('Setup', t => {\n  t.true(DatacenterStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(DatacenterStub.hasMany.calledOnce, 'hasMany should be called once')\n  t.true(DatacenterStub.hasMany.calledWith(RegionStub), 'Argument needs should be the RegionModel args')\n  t.true(DatacenterStub.belongsTo.called, 'TypeModel.belongsTo was executed')\n  t.true(DatacenterStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(DatacenterStub.belongsTo.calledWith(DatacenterMainStub), 'TypeModel.belongsTo should be called with DatacenterMainModel args')\n})\n\ntest.serial('Datacenter#createOrUpdate - exist', async t => {\n  const datacenter = await db.Datacenter.createOrUpdate(datacenterFixtures.single, datacenterMainId)\n\n  t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')\n  t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')\n  t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')\n  t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')\n  t.true(DatacenterStub.findOne.calledTwice, 'Datacenter#findOne should be called once')\n  t.true(DatacenterStub.findOne.calledWith(condDatacenterArgs), 'findOne should be called with tipo Args')\n  t.true(DatacenterStub.update.called, 'update should be called')\n  t.true(DatacenterStub.update.calledOnce, 'update should be called once')\n  t.true(DatacenterStub.update.calledWith(datacenterFixtures.single, condDatacenterArgs), 'update should be called with single, cond Args')\n\n  t.deepEqual(datacenter, datacenterFixtures.single, 'should be the same')\n})\n\ntest.serial('Datacenter#createOrUpdate - new', async t => {\n  const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, datacenterMainId)\n\n  t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')\n  t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')\n  t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')\n  t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')\n  t.true(DatacenterStub.findOne.calledOnce, 'Datacenter#findOne should be called once')\n  t.true(DatacenterStub.findOne.calledWith({ where: { datacenter: newDatacenter.datacenter } }), 'findOne should be called with newDatacenter Args')\n  t.true(DatacenterStub.create.calledOnce, 'create should be called once')\n  t.true(DatacenterStub.create.calledWith(newDatacenter), 'create should be called with newDatacenter args')\n\n  t.deepEqual(datacenter, newDatacenter, 'should be the same')\n})\n\ntest.serial('Datacenter#createOrUpdate - datacenterMain no exist', async t => {\n  const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, newDatacenterMainId)\n\n  t.true(DatacenterMainStub.findOne.called, 'DatacenterMain.findOne was execute')\n  t.true(DatacenterMainStub.findOne.calledOnce, ' findOne should be called once')\n  t.true(DatacenterMainStub.findOne.calledWith(condNewDatacenterMain), 'findOne should be called with condNewDatacenterMain args')\n\n  t.deepEqual(datacenter, datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId), 'should be the same')\n})\n\ntest.serial('Datacenter#findAll', async t => {\n  let datacenters = await db.Datacenter.findAll()\n\n  t.true(DatacenterStub.findAll.called, 'findAll should be called')\n  t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(DatacenterStub.findAll.calledWith(), 'findAll should be called without any args')\n\n  t.deepEqual(datacenters, datacenterFixtures.findAll, 'Classes should be the same')\n})\n\ntest.serial('Datacenter#findByDatacenterMain', async t => {\n  let datacenters = await db.Datacenter.findByDatacenterMain(datacenterMainId)\n  t.true(DatacenterStub.findAll.called, 'findAll should be called')\n  t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')\n\n  t.deepEqual(datacenters, datacenterFixtures.findByDatacenterMainId(datacenterMainId), 'should be the same')\n})\n"]}