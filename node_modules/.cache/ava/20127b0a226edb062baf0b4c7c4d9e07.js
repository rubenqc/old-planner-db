'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const datacenterFixtures = require('./fixtures/region');

const regionFixtures = require('./fixtures/region');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let DatacenterStub = null;
let RegionStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let TypeStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let ClassStub = {
  hasMany: sinon.spy()
};
let DatacenterMainStub = {
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy() // let datacenterMainId = 1
  // let condDatacenterArgs = {
  //   where: {
  //     dc_principal: datacenterMainId
  //   }
  // }
  // let newDatacenterMainId = 5
  // let condNewDatacenterMain = {
  //   where: { dc_principal: newDatacenterMainId }
  // }
  // let datacenterId = regionFixtures.single.region
  // let condRegionArgs = {
  //   where: {
  //     region: datacenterId
  //   }
  // }
  // let newDatacenter = {
  //   id: 8,
  //   nombre: 'lalolalocura',
  //   dc_principalId: datacenterMainId
  // }

};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  RegionStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy()
  };
  DatacenterStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy() //   // Class#Model findOne Stub
    //   DatacenterStub.findOne = sandbox.stub()
    //   DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))
    //   DatacenterStub.findOne.withArgs(condNewDatacenterMain).returns(Promise.resolve(datacenterFixtures.findByDatacenterMain(newDatacenterMainId)))
    //   // Type#Model findOne Stub
    //   RegionStub.findOne = sandbox.stub()
    //   RegionStub.findOne.withArgs(condRegionArgs).returns(Promise.resolve(regionFixtures.single))
    //   // Type#Model update Stub
    //   RegionStub.update = sandbox.stub()
    //   RegionStub.update.withArgs(regionFixtures.single, condRegionArgs).returns(Promise.resolve(regionFixtures.single))
    //   // Type#Model create Stub
    //   RegionStub.create = sandbox.stub()
    //   RegionStub.create.withArgs(newDatacenter).returns(Promise.resolve({
    //     toJSON () {
    //       return newDatacenter
    //     }
    //   }))
    //   // Class#Model findAll Stub
    //   RegionStub.findAll = sandbox.stub()
    //   RegionStub.findAll.withArgs().returns(Promise.resolve(regionFixtures.findAll))
    //   RegionStub.findAll.withArgs({
    //     attributes: ['region', 'nombre'],
    //     group: ['region'],
    //     include: [{
    //       attributes: [],
    //       model: DatacenterStub,
    //       where: {
    //         dc_principal: datacenterMainId
    //       }
    //     }],
    //     raw: true
    //   }).returns(Promise.resolve(regionFixtures.findByDatacenterMainId(datacenterMainId)))

  };
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Region', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").Region, "arguments/0"), {
    content: "t.truthy(db.Region, 'Region service should exist')",
    filepath: "tests/region-test.js",
    line: 187,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"Region\",\"range\":[12,18]},\"computed\":false,\"range\":[9,18]},{\"type\":\"StringLiteral\",\"value\":\"Region service should exist\",\"range\":[20,49]}],\"range\":[0,50]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"Region\",\"range\":[12,18]},{\"type\":{\"label\":\",\"},\"range\":[18,19]},{\"type\":{\"label\":\"string\"},\"value\":\"Region service should exist\",\"range\":[20,49]},{\"type\":{\"label\":\")\"},\"range\":[49,50]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Region service should exist');
});
test('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(RegionStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(RegionStub.hasMany.called, 'DatacenterModel.hasMany was execute')",
    filepath: "tests/region-test.js",
    line: 191,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterModel.hasMany was execute\",\"range\":[34,71]}],\"range\":[0,72]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[26,32]},{\"type\":{\"label\":\",\"},\"range\":[32,33]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterModel.hasMany was execute\",\"range\":[34,71]},{\"type\":{\"label\":\")\"},\"range\":[71,72]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterModel.hasMany was execute');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(RegionStub, "arguments/0/left/object/object").hasMany, "arguments/0/left/object").callCount, "arguments/0/left") === 6, "arguments/0"), {
    content: "t.true(RegionStub.hasMany.callCount === 6, 'hasMany should be called once')",
    filepath: "tests/region-test.js",
    line: 192,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"callCount\",\"range\":[26,35]},\"computed\":false,\"range\":[7,35]},\"right\":{\"type\":\"NumericLiteral\",\"value\":6,\"range\":[40,41]},\"range\":[7,41]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called once\",\"range\":[43,74]}],\"range\":[0,75]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"callCount\",\"range\":[26,35]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[36,39]},{\"type\":{\"label\":\"num\"},\"value\":6,\"range\":[40,41]},{\"type\":{\"label\":\",\"},\"range\":[41,42]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called once\",\"range\":[43,74]},{\"type\":{\"label\":\")\"},\"range\":[74,75]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called once');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(UsersStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel args')",
    filepath: "tests/region-test.js",
    line: 193,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UsersStub\",\"range\":[37,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UsersModel args\",\"range\":[49,95]}],\"range\":[0,96]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"UsersStub\",\"range\":[37,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UsersModel args\",\"range\":[49,95]},{\"type\":{\"label\":\")\"},\"range\":[95,96]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UsersModel args');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec5._capt(TrafficStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel args')",
    filepath: "tests/region-test.js",
    line: 194,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"TrafficStub\",\"range\":[37,48]}],\"range\":[7,49]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the TrafficModel args\",\"range\":[51,99]}],\"range\":[0,100]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"TrafficStub\",\"range\":[37,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]},{\"type\":{\"label\":\",\"},\"range\":[49,50]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the TrafficModel args\",\"range\":[51,99]},{\"type\":{\"label\":\")\"},\"range\":[99,100]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the TrafficModel args');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec6._capt(GbStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(GbStub), 'Argument needs should be the GbModel args')",
    filepath: "tests/region-test.js",
    line: 195,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"GbStub\",\"range\":[37,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the GbModel args\",\"range\":[46,89]}],\"range\":[0,90]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"GbStub\",\"range\":[37,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the GbModel args\",\"range\":[46,89]},{\"type\":{\"label\":\")\"},\"range\":[89,90]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the GbModel args');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec7._capt(ThStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(ThStub), 'Argument needs should be the ThModel args')",
    filepath: "tests/region-test.js",
    line: 196,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThStub\",\"range\":[37,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the ThModel args\",\"range\":[46,89]}],\"range\":[0,90]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"ThStub\",\"range\":[37,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the ThModel args\",\"range\":[46,89]},{\"type\":{\"label\":\")\"},\"range\":[89,90]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the ThModel args');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec8._capt(SauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(SauStub), 'Argument needs should be the SauModel args')",
    filepath: "tests/region-test.js",
    line: 197,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"SauStub\",\"range\":[37,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the SauModel args\",\"range\":[47,91]}],\"range\":[0,92]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"SauStub\",\"range\":[37,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the SauModel args\",\"range\":[47,91]},{\"type\":{\"label\":\")\"},\"range\":[91,92]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the SauModel args');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(RegionStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec9._capt(PdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.hasMany.calledWith(PdpStub), 'Argument needs should be the PdpModel args')",
    filepath: "tests/region-test.js",
    line: 198,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"PdpStub\",\"range\":[37,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the PdpModel args\",\"range\":[47,91]}],\"range\":[0,92]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"PdpStub\",\"range\":[37,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the PdpModel args\",\"range\":[47,91]},{\"type\":{\"label\":\")\"},\"range\":[91,92]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the PdpModel args');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(RegionStub, "arguments/0/object/object").belongsTo, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(RegionStub.belongsTo.called, 'DatacenterModel.belongsTo was executed')",
    filepath: "tests/region-test.js",
    line: 199,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[18,27]},\"computed\":false,\"range\":[7,27]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[28,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterModel.belongsTo was executed\",\"range\":[36,76]}],\"range\":[0,77]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[18,27]},{\"type\":{\"label\":\".\"},\"range\":[27,28]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[28,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterModel.belongsTo was executed\",\"range\":[36,76]},{\"type\":{\"label\":\")\"},\"range\":[76,77]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterModel.belongsTo was executed');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(RegionStub, "arguments/0/object/object").belongsTo, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(RegionStub.belongsTo.calledOnce, 'belongsTo should be called once')",
    filepath: "tests/region-test.js",
    line: 200,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[18,27]},\"computed\":false,\"range\":[7,27]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[28,38]},\"computed\":false,\"range\":[7,38]},{\"type\":\"StringLiteral\",\"value\":\"belongsTo should be called once\",\"range\":[40,73]}],\"range\":[0,74]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[18,27]},{\"type\":{\"label\":\".\"},\"range\":[27,28]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[28,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"string\"},\"value\":\"belongsTo should be called once\",\"range\":[40,73]},{\"type\":{\"label\":\")\"},\"range\":[73,74]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'belongsTo should be called once');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(RegionStub, "arguments/0/callee/object/object").belongsTo, "arguments/0/callee/object").calledWith(_rec12._capt(RegionStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(RegionStub.belongsTo.calledWith(RegionStub), 'TypeModel.belongsTo should be called with DatacenterMainModel args')",
    filepath: "tests/region-test.js",
    line: 201,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[18,27]},\"computed\":false,\"range\":[7,27]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[28,38]},\"computed\":false,\"range\":[7,38]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[39,49]}],\"range\":[7,50]},{\"type\":\"StringLiteral\",\"value\":\"TypeModel.belongsTo should be called with DatacenterMainModel args\",\"range\":[52,120]}],\"range\":[0,121]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[18,27]},{\"type\":{\"label\":\".\"},\"range\":[27,28]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[28,38]},{\"type\":{\"label\":\"(\"},\"range\":[38,39]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[39,49]},{\"type\":{\"label\":\")\"},\"range\":[49,50]},{\"type\":{\"label\":\",\"},\"range\":[50,51]},{\"type\":{\"label\":\"string\"},\"value\":\"TypeModel.belongsTo should be called with DatacenterMainModel args\",\"range\":[52,120]},{\"type\":{\"label\":\")\"},\"range\":[120,121]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'TypeModel.belongsTo should be called with DatacenterMainModel args');
}); // test.serial('Region#createOrUpdate - exist', async t => {
//   const region = await db.Datacenter.createOrUpdate(regionFixtures.single, datacenterMainId)
//   t.true(DatacenterStub.findOne.called, 'DatacenterMainModel.findOne was execute')
//   t.true(DatacenterStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')
//   t.true(DatacenterStub.findOne.calledWith(condDatacenterArgs), 'findOne should be called with condArgs args')
//   t.true(RegionStub.findOne.called, 'Datacenter.findOne was execute')
//   t.true(RegionStub.findOne.calledTwice, 'Datacenter#findOne should be called once')
//   t.true(RegionStub.findOne.calledWith(condRegionArgs), 'findOne should be called with tipo Args')
//   t.true(RegionStub.update.called, 'update should be called')
//   t.true(RegionStub.update.calledOnce, 'update should be called once')
//   t.true(RegionStub.update.calledWith(regionFixtures.single, condRegionArgs), 'update should be called with single, cond Args')
//   t.deepEqual(region, regionFixtures.single, 'should be the same')
// })
// test.serial('Datacenter#createOrUpdate - new', async t => {
//   const region = await db.Datacenter.createOrUpdate(newDatacenter, datacenterMainId)
//   t.true(DatacenterStub.findOne.called, 'DatacenterMainModel.findOne was execute')
//   t.true(DatacenterStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')
//   t.true(DatacenterStub.findOne.calledWith(condDatacenterArgs), 'findOne should be called with condArgs args')
//   t.true(RegionStub.findOne.called, 'Datacenter.findOne was execute')
//   t.true(RegionStub.findOne.calledOnce, 'Datacenter#findOne should be called once')
//   t.true(RegionStub.findOne.calledWith({ where: { region: newDatacenter.region } }), 'findOne should be called with newDatacenter Args')
//   t.true(RegionStub.create.calledOnce, 'create should be called once')
//   t.true(RegionStub.create.calledWith(newDatacenter), 'create should be called with newDatacenter args')
//   t.deepEqual(region, newDatacenter, 'should be the same')
// })
// test.serial('Datacenter#createOrUpdate - datacenterMain no exist', async t => {
//   const region = await db.Datacenter.createOrUpdate(newDatacenter, newDatacenterMainId)
//   t.true(DatacenterStub.findOne.called, 'DatacenterMain.findOne was execute')
//   t.true(DatacenterStub.findOne.calledOnce, ' findOne should be called once')
//   t.true(DatacenterStub.findOne.calledWith(condNewDatacenterMain), 'findOne should be called with condNewDatacenterMain args')
//   t.deepEqual(region, datacenterFixtures.findByDatacenterMain(newDatacenterMainId), 'should be the same')
// })
// test.serial('Datacenter#findAll', async t => {
//   let datacenters = await db.Datacenter.findAll()
//   t.true(RegionStub.findAll.called, 'findAll should be called')
//   t.true(RegionStub.findAll.calledOnce, 'findAll should be called once')
//   t.true(RegionStub.findAll.calledWith(), 'findAll should be called without any args')
//   t.deepEqual(datacenters, regionFixtures.findAll, 'Classes should be the same')
// })
// test.serial('Datacenter#findByDatacenterMain', async t => {
//   let datacenters = await db.Datacenter.findByDatacenterMain(datacenterMainId)
//   t.true(RegionStub.findAll.called, 'findAll should be called')
//   t.true(RegionStub.findAll.calledOnce, 'findAll should be called once')
//   t.deepEqual(datacenters, regionFixtures.findByDatacenterMainId(datacenterMainId), 'should be the same')
// })
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/20127b0a226edb062baf0b4c7c4d9e07.js.map