'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const datacenterFixtures = require('./fixtures/datacenter');

const regionFixtures = require('./fixtures/datacenterMain');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let RegionStub = null;
let DatacenterStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let TypeStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let ClassStub = {
  hasMany: sinon.spy()
};
let DatacenterMainStub = {
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy() // let datacenterMainId = 1
  // let condMainArgs = {
  //   where: {
  //     dc_principal: datacenterMainId
  //   }
  // }
  // let newDatacenterMainId = 5
  // let condNewDatacenterMain = {
  //   where: { dc_principal: newDatacenterMainId }
  // }
  // let datacenterId = datacenterFixtures.single.datacenter
  // let condDatacenterArgs = {
  //   where: {
  //     datacenter: datacenterId
  //   }
  // }
  // let newDatacenter = {
  //   id: 8,
  //   nombre: 'lalolalocura',
  //   dc_principalId: datacenterMainId
  // }

};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  DatacenterStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy()
  };
  RegionStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy() //   // Class#Model findOne Stub
    //   DatacenterMainStub.findOne = sandbox.stub()
    //   DatacenterMainStub.findOne.withArgs(condMainArgs).returns(Promise.resolve(datacenterMainFixtures.single))
    //   DatacenterMainStub.findOne.withArgs(condNewDatacenterMain).returns(Promise.resolve(datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId)))
    //   // Type#Model findOne Stub
    //   DatacenterStub.findOne = sandbox.stub()
    //   DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))
    //   // Type#Model update Stub
    //   DatacenterStub.update = sandbox.stub()
    //   DatacenterStub.update.withArgs(datacenterFixtures.single, condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))
    //   // Type#Model create Stub
    //   DatacenterStub.create = sandbox.stub()
    //   DatacenterStub.create.withArgs(newDatacenter).returns(Promise.resolve({
    //     toJSON () {
    //       return newDatacenter
    //     }
    //   }))
    //   // Class#Model findAll Stub
    //   DatacenterStub.findAll = sandbox.stub()
    //   DatacenterStub.findAll.withArgs().returns(Promise.resolve(datacenterFixtures.findAll))
    //   DatacenterStub.findAll.withArgs({
    //     attributes: ['datacenter', 'nombre'],
    //     group: ['datacenter'],
    //     include: [{
    //       attributes: [],
    //       model: DatacenterMainStub,
    //       where: {
    //         dc_principal: datacenterMainId
    //       }
    //     }],
    //     raw: true
    //   }).returns(Promise.resolve(datacenterFixtures.findByDatacenterMainId(datacenterMainId)))

  };
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Region', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").Region, "arguments/0"), {
    content: "t.truthy(db.Region, 'Datacenter service should exist')",
    filepath: "tests/region-test.js",
    line: 187,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"Region\",\"range\":[12,18]},\"computed\":false,\"range\":[9,18]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter service should exist\",\"range\":[20,53]}],\"range\":[0,54]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"Region\",\"range\":[12,18]},{\"type\":{\"label\":\",\"},\"range\":[18,19]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter service should exist\",\"range\":[20,53]},{\"type\":{\"label\":\")\"},\"range\":[53,54]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter service should exist');
}); // test('Setup', t => {
//   t.true(DatacenterStub.hasMany.called, 'TypeModel.hasMany was execute')
//   t.true(DatacenterStub.hasMany.calledOnce, 'hasMany should be called once')
//   t.true(DatacenterStub.hasMany.calledWith(RegionStub), 'Argument needs should be the RegionModel args')
//   t.true(DatacenterStub.belongsTo.called, 'TypeModel.belongsTo was executed')
//   t.true(DatacenterStub.belongsTo.calledOnce, 'belongsTo should be called once')
//   t.true(DatacenterStub.belongsTo.calledWith(DatacenterMainStub), 'TypeModel.belongsTo should be called with DatacenterMainModel args')
// })
// test.serial('Datacenter#createOrUpdate - exist', async t => {
//   const datacenter = await db.Datacenter.createOrUpdate(datacenterFixtures.single, datacenterMainId)
//   t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')
//   t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')
//   t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')
//   t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')
//   t.true(DatacenterStub.findOne.calledTwice, 'Datacenter#findOne should be called once')
//   t.true(DatacenterStub.findOne.calledWith(condDatacenterArgs), 'findOne should be called with tipo Args')
//   t.true(DatacenterStub.update.called, 'update should be called')
//   t.true(DatacenterStub.update.calledOnce, 'update should be called once')
//   t.true(DatacenterStub.update.calledWith(datacenterFixtures.single, condDatacenterArgs), 'update should be called with single, cond Args')
//   t.deepEqual(datacenter, datacenterFixtures.single, 'should be the same')
// })
// test.serial('Datacenter#createOrUpdate - new', async t => {
//   const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, datacenterMainId)
//   t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')
//   t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')
//   t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')
//   t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')
//   t.true(DatacenterStub.findOne.calledOnce, 'Datacenter#findOne should be called once')
//   t.true(DatacenterStub.findOne.calledWith({ where: { datacenter: newDatacenter.datacenter } }), 'findOne should be called with newDatacenter Args')
//   t.true(DatacenterStub.create.calledOnce, 'create should be called once')
//   t.true(DatacenterStub.create.calledWith(newDatacenter), 'create should be called with newDatacenter args')
//   t.deepEqual(datacenter, newDatacenter, 'should be the same')
// })
// test.serial('Datacenter#createOrUpdate - datacenterMain no exist', async t => {
//   const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, newDatacenterMainId)
//   t.true(DatacenterMainStub.findOne.called, 'DatacenterMain.findOne was execute')
//   t.true(DatacenterMainStub.findOne.calledOnce, ' findOne should be called once')
//   t.true(DatacenterMainStub.findOne.calledWith(condNewDatacenterMain), 'findOne should be called with condNewDatacenterMain args')
//   t.deepEqual(datacenter, datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId), 'should be the same')
// })
// test.serial('Datacenter#findAll', async t => {
//   let datacenters = await db.Datacenter.findAll()
//   t.true(DatacenterStub.findAll.called, 'findAll should be called')
//   t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')
//   t.true(DatacenterStub.findAll.calledWith(), 'findAll should be called without any args')
//   t.deepEqual(datacenters, datacenterFixtures.findAll, 'Classes should be the same')
// })
// test.serial('Datacenter#findByDatacenterMain', async t => {
//   let datacenters = await db.Datacenter.findByDatacenterMain(datacenterMainId)
//   t.true(DatacenterStub.findAll.called, 'findAll should be called')
//   t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')
//   t.deepEqual(datacenters, datacenterFixtures.findByDatacenterMainId(datacenterMainId), 'should be the same')
// })
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/a7c90bcd301ff992be0fb4132c964e48.js.map