'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const dateFixtures = require('./fixtures/date');

let single = Object.assign({}, dateFixtures.single);
let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let DateStub = null; // general

let TypeStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let ClassStub = {
  hasMany: sinon.spy()
};
let RegionStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterMainStub = {
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy()
};
let fecha = '2018-05-01';
let dateArgs = {
  where: {
    fecha
  }
};
let newDate = {
  id: 4,
  fecha: '2017-06-07'
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  DateStub = {
    hasMany: sandbox.spy(),
    beforeEach: sandbox.spy() // Date#Model findOne Stub

  };
  DateStub.findOne = sandbox.stub();
  DateStub.findOne.withArgs(dateArgs).returns(Promise.resolve(dateFixtures.findByDate(fecha))); // Date#Model update Stub

  DateStub.update = sandbox.stub();
  DateStub.update.withArgs(single, dateArgs).returns(Promise.resolve(single)); //Date#Model create Stub

  DateStub.create = sandbox.stub();
  DateStub.create.withArgs(newDate).returns(Promise.resolve({
    toJSON() {
      return newDate;
    }

  })); //Date#Model findAll Stub

  DateStub.findAll = sandbox.stub();
  DateStub.findAll.withArgs().returns(Promise.resolve(dateFixtures.all));
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Date', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").DateFecha, "arguments/0"), {
    content: "t.truthy(db.DateFecha, 'Date service should exists.')",
    filepath: "tests/date-tests.js",
    line: 161,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"DateFecha\",\"range\":[12,21]},\"computed\":false,\"range\":[9,21]},{\"type\":\"StringLiteral\",\"value\":\"Date service should exists.\",\"range\":[23,52]}],\"range\":[0,53]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"DateFecha\",\"range\":[12,21]},{\"type\":{\"label\":\",\"},\"range\":[21,22]},{\"type\":{\"label\":\"string\"},\"value\":\"Date service should exists.\",\"range\":[23,52]},{\"type\":{\"label\":\")\"},\"range\":[52,53]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Date service should exists.');
});
test.serial('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(DateStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.hasMany.called, 'DateModel.hasMany was execute')",
    filepath: "tests/date-tests.js",
    line: 165,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"DateModel.hasMany was execute\",\"range\":[32,63]}],\"range\":[0,64]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"DateModel.hasMany was execute\",\"range\":[32,63]},{\"type\":{\"label\":\")\"},\"range\":[63,64]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DateModel.hasMany was execute');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(DateStub, "arguments/0/left/object/object").hasMany, "arguments/0/left/object").callCount, "arguments/0/left") === 14, "arguments/0"), {
    content: "t.true(DateStub.hasMany.callCount === 14, 'hasMany should be called 14 times')",
    filepath: "tests/date-tests.js",
    line: 166,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"callCount\",\"range\":[24,33]},\"computed\":false,\"range\":[7,33]},\"right\":{\"type\":\"NumericLiteral\",\"value\":14,\"range\":[38,40]},\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called 14 times\",\"range\":[42,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"callCount\",\"range\":[24,33]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[34,37]},{\"type\":{\"label\":\"num\"},\"value\":14,\"range\":[38,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called 14 times\",\"range\":[42,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called 14 times');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(UsersStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')",
    filepath: "tests/date-tests.js",
    line: 167,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UsersStub\",\"range\":[35,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UsersModel\",\"range\":[47,88]}],\"range\":[0,89]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"UsersStub\",\"range\":[35,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UsersModel\",\"range\":[47,88]},{\"type\":{\"label\":\")\"},\"range\":[88,89]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UsersModel');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec5._capt(TrafficStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')",
    filepath: "tests/date-tests.js",
    line: 168,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"TrafficStub\",\"range\":[35,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the TrafficModel\",\"range\":[49,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"TrafficStub\",\"range\":[35,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the TrafficModel\",\"range\":[49,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the TrafficModel');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec6._capt(GbStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(GbStub), 'Argument needs should be the GbModel')",
    filepath: "tests/date-tests.js",
    line: 169,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"GbStub\",\"range\":[35,41]}],\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the GbModel\",\"range\":[44,82]}],\"range\":[0,83]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"GbStub\",\"range\":[35,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the GbModel\",\"range\":[44,82]},{\"type\":{\"label\":\")\"},\"range\":[82,83]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the GbModel');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec7._capt(CentralizedAnalysisStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(CentralizedAnalysisStub), 'Argument needs should be the CentralizedAnlysis')",
    filepath: "tests/date-tests.js",
    line: 170,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"CentralizedAnalysisStub\",\"range\":[35,58]}],\"range\":[7,59]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the CentralizedAnlysis\",\"range\":[61,110]}],\"range\":[0,111]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"CentralizedAnalysisStub\",\"range\":[35,58]},{\"type\":{\"label\":\")\"},\"range\":[58,59]},{\"type\":{\"label\":\",\"},\"range\":[59,60]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the CentralizedAnlysis\",\"range\":[61,110]},{\"type\":{\"label\":\")\"},\"range\":[110,111]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the CentralizedAnlysis');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec8._capt(ThStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(ThStub), 'Argument needs should be the ThModel')",
    filepath: "tests/date-tests.js",
    line: 171,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThStub\",\"range\":[35,41]}],\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the ThModel\",\"range\":[44,82]}],\"range\":[0,83]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"ThStub\",\"range\":[35,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the ThModel\",\"range\":[44,82]},{\"type\":{\"label\":\")\"},\"range\":[82,83]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the ThModel');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec9._capt(PdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(PdpStub), 'Argument needs should be the PdpModel')",
    filepath: "tests/date-tests.js",
    line: 172,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"PdpStub\",\"range\":[35,42]}],\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the PdpModel\",\"range\":[45,84]}],\"range\":[0,85]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"PdpStub\",\"range\":[35,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the PdpModel\",\"range\":[45,84]},{\"type\":{\"label\":\")\"},\"range\":[84,85]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the PdpModel');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec10._capt(SauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(SauStub), 'Argument needs should be the SauModel')",
    filepath: "tests/date-tests.js",
    line: 173,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"SauStub\",\"range\":[35,42]}],\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the SauModel\",\"range\":[45,84]}],\"range\":[0,85]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"SauStub\",\"range\":[35,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the SauModel\",\"range\":[45,84]},{\"type\":{\"label\":\")\"},\"range\":[84,85]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the SauModel');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec11._capt(UthStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(UthStub), 'Argument needs should be the UthModel')",
    filepath: "tests/date-tests.js",
    line: 174,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UthStub\",\"range\":[35,42]}],\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UthModel\",\"range\":[45,84]}],\"range\":[0,85]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"UthStub\",\"range\":[35,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UthModel\",\"range\":[45,84]},{\"type\":{\"label\":\")\"},\"range\":[84,85]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UthModel');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec12._capt(UpdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(UpdpStub), 'Argument needs should be the UpdpModel')",
    filepath: "tests/date-tests.js",
    line: 175,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UpdpStub\",\"range\":[35,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UpdpModel\",\"range\":[46,86]}],\"range\":[0,87]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"UpdpStub\",\"range\":[35,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UpdpModel\",\"range\":[46,86]},{\"type\":{\"label\":\")\"},\"range\":[86,87]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UpdpModel');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec13._capt(UsauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(UsauStub), 'Argument needs should be the UsauModel')",
    filepath: "tests/date-tests.js",
    line: 176,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UsauStub\",\"range\":[35,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UsauModel\",\"range\":[46,86]}],\"range\":[0,87]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"UsauStub\",\"range\":[35,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UsauModel\",\"range\":[46,86]},{\"type\":{\"label\":\")\"},\"range\":[86,87]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UsauModel');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec14._capt(SauUsersStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(SauUsersStub), 'Argument needs should be the SauUsersModel')",
    filepath: "tests/date-tests.js",
    line: 177,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"SauUsersStub\",\"range\":[35,47]}],\"range\":[7,48]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the SauUsersModel\",\"range\":[50,94]}],\"range\":[0,95]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"SauUsersStub\",\"range\":[35,47]},{\"type\":{\"label\":\")\"},\"range\":[47,48]},{\"type\":{\"label\":\",\"},\"range\":[48,49]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the SauUsersModel\",\"range\":[50,94]},{\"type\":{\"label\":\")\"},\"range\":[94,95]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the SauUsersModel');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec15._capt(PdpSauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(PdpSauStub), 'Argument needs should be the PspSauModel')",
    filepath: "tests/date-tests.js",
    line: 178,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"PdpSauStub\",\"range\":[35,45]}],\"range\":[7,46]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the PspSauModel\",\"range\":[48,90]}],\"range\":[0,91]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"PdpSauStub\",\"range\":[35,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]},{\"type\":{\"label\":\",\"},\"range\":[46,47]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the PspSauModel\",\"range\":[48,90]},{\"type\":{\"label\":\")\"},\"range\":[90,91]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the PspSauModel');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec16._capt(ThfcPdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(ThfcPdpStub), 'Argument needs should be the ThfcPdpModel')",
    filepath: "tests/date-tests.js",
    line: 179,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThfcPdpStub\",\"range\":[35,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the ThfcPdpModel\",\"range\":[49,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"ThfcPdpStub\",\"range\":[35,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the ThfcPdpModel\",\"range\":[49,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the ThfcPdpModel');
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(DateStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec17._capt(ThfcSauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.hasMany.calledWith(ThfcSauStub), 'Argument needs should be the ThfcSauModel')",
    filepath: "tests/date-tests.js",
    line: 180,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThfcSauStub\",\"range\":[35,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the ThfcSauModel\",\"range\":[49,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"ThfcSauStub\",\"range\":[35,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the ThfcSauModel\",\"range\":[49,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the ThfcSauModel');
});
test.serial('Date#createOrUpdate - exists', async t => {
  var _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder();

  let date = await db.DateFecha.createOrUpdate(single);
  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.findOne.called, 'findOne should be called on model')",
    filepath: "tests/date-tests.js",
    line: 186,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called on model\",\"range\":[32,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called on model\",\"range\":[32,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(DateStub.findOne.calledTwice, 'findOne should be called twice')",
    filepath: "tests/date-tests.js",
    line: 187,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[24,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called twice\",\"range\":[37,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[24,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called twice\",\"range\":[37,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called twice');
  t.true(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(DateStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec20._capt(dateArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.findOne.calledWith(dateArgs), 'findOne should be called with date args')",
    filepath: "tests/date-tests.js",
    line: 188,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"dateArgs\",\"range\":[35,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with date args\",\"range\":[46,87]}],\"range\":[0,88]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"dateArgs\",\"range\":[35,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with date args\",\"range\":[46,87]},{\"type\":{\"label\":\")\"},\"range\":[87,88]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with date args');
  t.deepEqual(date, dateFixtures.findByDate(fecha), 'should be the same');
});
test.serial('Date#createOrUpdate - new', async t => {
  var _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder(),
      _rec24 = new _powerAssertRecorder(),
      _rec25 = new _powerAssertRecorder(),
      _rec26 = new _powerAssertRecorder();

  let date = await db.DateFecha.createOrUpdate(newDate);
  t.true(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.findOne.called, 'findOne should be called on model')",
    filepath: "tests/date-tests.js",
    line: 196,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called on model\",\"range\":[32,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called on model\",\"range\":[32,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DateStub.findOne.calledOnce, 'findOne should be called once')",
    filepath: "tests/date-tests.js",
    line: 197,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called once\",\"range\":[36,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[24,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called once\",\"range\":[36,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(DateStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec23._capt({
    where: _rec23._capt({
      fecha: _rec23._capt(_rec23._capt(newDate, "arguments/0/arguments/0/properties/0/value/properties/0/value/object").fecha, "arguments/0/arguments/0/properties/0/value/properties/0/value")
    }, "arguments/0/arguments/0/properties/0/value")
  }, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.findOne.calledWith({ where: { fecha: newDate.fecha } }), 'findOne should be called with cond args')",
    filepath: "tests/date-tests.js",
    line: 198,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"where\",\"range\":[37,42]},\"value\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"fecha\",\"range\":[46,51]},\"value\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"newDate\",\"range\":[53,60]},\"property\":{\"type\":\"Identifier\",\"name\":\"fecha\",\"range\":[61,66]},\"computed\":false,\"range\":[53,66]},\"computed\":false,\"shorthand\":false,\"range\":[46,66]}],\"range\":[44,68]},\"computed\":false,\"shorthand\":false,\"range\":[37,68]}],\"range\":[35,70]}],\"range\":[7,71]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with cond args\",\"range\":[73,114]}],\"range\":[0,115]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"{\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"where\",\"range\":[37,42]},{\"type\":{\"label\":\":\"},\"range\":[42,43]},{\"type\":{\"label\":\"{\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"fecha\",\"range\":[46,51]},{\"type\":{\"label\":\":\"},\"range\":[51,52]},{\"type\":{\"label\":\"name\"},\"value\":\"newDate\",\"range\":[53,60]},{\"type\":{\"label\":\".\"},\"range\":[60,61]},{\"type\":{\"label\":\"name\"},\"value\":\"fecha\",\"range\":[61,66]},{\"type\":{\"label\":\"}\"},\"range\":[67,68]},{\"type\":{\"label\":\"}\"},\"range\":[69,70]},{\"type\":{\"label\":\")\"},\"range\":[70,71]},{\"type\":{\"label\":\",\"},\"range\":[71,72]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with cond args\",\"range\":[73,114]},{\"type\":{\"label\":\")\"},\"range\":[114,115]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with cond args');
  t.true(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(DateStub, "arguments/0/object/object").create, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.create.called, 'create should be called on model')",
    filepath: "tests/date-tests.js",
    line: 203,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[23,29]},\"computed\":false,\"range\":[7,29]},{\"type\":\"StringLiteral\",\"value\":\"create should be called on model\",\"range\":[31,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called on model\",\"range\":[31,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called on model');
  t.true(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(DateStub, "arguments/0/object/object").create, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DateStub.create.calledOnce, 'create should be called once')",
    filepath: "tests/date-tests.js",
    line: 204,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},{\"type\":\"StringLiteral\",\"value\":\"create should be called once\",\"range\":[35,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[23,33]},{\"type\":{\"label\":\",\"},\"range\":[33,34]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called once\",\"range\":[35,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once');
  t.true(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(DateStub, "arguments/0/callee/object/object").create, "arguments/0/callee/object").calledWith(_rec26._capt(newDate, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.create.calledWith(newDate), 'create should be called with newDate args')",
    filepath: "tests/date-tests.js",
    line: 205,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newDate\",\"range\":[34,41]}],\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"create should be called with newDate args\",\"range\":[44,87]}],\"range\":[0,88]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[23,33]},{\"type\":{\"label\":\"(\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"newDate\",\"range\":[34,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called with newDate args\",\"range\":[44,87]},{\"type\":{\"label\":\")\"},\"range\":[87,88]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with newDate args');
  t.deepEqual(date, newDate, 'should be the same');
});
test.serial('Date#findAll', async t => {
  var _rec27 = new _powerAssertRecorder(),
      _rec28 = new _powerAssertRecorder(),
      _rec29 = new _powerAssertRecorder();

  let dates = await db.DateFecha.findAll();
  t.true(_rec27._expr(_rec27._capt(_rec27._capt(_rec27._capt(DateStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.findAll.called, 'findAll should be called on model')",
    filepath: "tests/date-tests.js",
    line: 213,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called on model\",\"range\":[32,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called on model\",\"range\":[32,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(DateStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DateStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/date-tests.js",
    line: 214,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[36,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[24,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[36,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(DateStub, "arguments/0/callee/object/object").findAll, "arguments/0/callee/object").calledWith(), "arguments/0"), {
    content: "t.true(DateStub.findAll.calledWith(), 'findAll should be called without args')",
    filepath: "tests/date-tests.js",
    line: 215,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[],\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called without args\",\"range\":[38,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called without args\",\"range\":[38,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called without args');
  t.deepEqual(dates, dateFixtures.all, 'dates should be the same');
});
test.serial('Date#findByDate', async t => {
  var _rec30 = new _powerAssertRecorder(),
      _rec31 = new _powerAssertRecorder(),
      _rec32 = new _powerAssertRecorder();

  let date = await db.DateFecha.findByDate(fecha);
  t.true(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DateStub.findOne.called, 'findOne should be called')",
    filepath: "tests/date-tests.js",
    line: 223,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called\",\"range\":[32,58]}],\"range\":[0,59]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called\",\"range\":[32,58]},{\"type\":{\"label\":\")\"},\"range\":[58,59]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called');
  t.true(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(DateStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnde, "arguments/0"), {
    content: "t.true(DateStub.findOne.calledOnde, 'findOne should be called once')",
    filepath: "tests/date-tests.js",
    line: 224,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnde\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called once\",\"range\":[36,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnde\",\"range\":[24,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called once\",\"range\":[36,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(DateStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec32._capt(dateArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DateStub.findOne.calledWith(dateArgs), 'findOne should be called with dateArgs args')",
    filepath: "tests/date-tests.js",
    line: 225,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DateStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"dateArgs\",\"range\":[35,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with dateArgs args\",\"range\":[46,91]}],\"range\":[0,92]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DateStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"dateArgs\",\"range\":[35,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with dateArgs args\",\"range\":[46,91]},{\"type\":{\"label\":\")\"},\"range\":[91,92]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with dateArgs args');
  t.deepEqual(date, single, 'should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/e5b70f83235ed0fc39b6ca20e8d1f817.js.map