{"version":3,"sources":["tests/metric-tests.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixtures","config","logging","uuid","id","MetricStub","AgentStub","sandbox","db","type","uuidArgs","agentUuidArgs","metricTest","value","metricTestCreate","agentId","createArgs","where","beforeEach","createSandbox","belongsTo","spy","hasMany","attributes","limit","order","include","model","raw","group","findAll","stub","withArgs","returns","Promise","resolve","findByAgentId","findByAgentType","findOne","single","create","toJSON","setupDatabase","serial","t","metrics","Metric","findByAgentUuid","true","called","calledOnce","calledWith","deepEqual","findByTypeAgentUuid","metric"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\n\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst metricFixtures = require('./fixtures/metric')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet uuid = 'yyy-yyy-yyw'\r\nlet id = 2\r\nlet MetricStub = null\r\nlet AgentStub = null\r\nlet sandbox = null\r\nlet db = null\r\nlet type = 'temperatura'\r\n\r\nlet uuidArgs = null\r\nlet agentUuidArgs = null\r\nlet metricTest = {\r\n  type: 'temperatura',\r\n  value: 15.2\r\n}\r\n\r\nlet metricTestCreate = {\r\n  type: 'temperatura',\r\n  value: 15.2,\r\n  agentId: 1\r\n}\r\n\r\nlet createArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.createSandbox()\r\n  MetricStub = {\r\n    belongsTo: sandbox.spy()\r\n  }\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  agentUuidArgs = {\r\n    attributes: ['id', 'type', 'value', 'createdAt'],\r\n    where: {\r\n      type\r\n    },\r\n    limit: 20,\r\n    order: [['createdAt', 'DESC']],\r\n    include: [{\r\n      attributes: [],\r\n      model: AgentStub,\r\n      where: {\r\n        uuid\r\n      }\r\n    }],\r\n    raw: true\r\n  }\r\n  uuidArgs = {\r\n    attributes: ['type'],\r\n    group: ['type'],\r\n    include: [{\r\n      attributes: [],\r\n      model: AgentStub,\r\n      where: {\r\n        uuid\r\n      }\r\n    }],\r\n    raw: true\r\n  }\r\n\r\n  // Metric findAll\r\n  MetricStub.findAll = sandbox.stub()\r\n  MetricStub.findAll.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.findByAgentId(id)))\r\n  MetricStub.findAll.withArgs(agentUuidArgs).returns(Promise.resolve(metricFixtures.findByAgentType(type, id)))\r\n\r\n  // Agent findOne\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(createArgs).returns(Promise.resolve(agentFixtures.single))\r\n\r\n  // Metric create\r\n  MetricStub.create = sandbox.stub()\r\n  MetricStub.create.withArgs(metricTestCreate).returns(Promise.resolve({\r\n    toJSON () {\r\n      return metricFixtures.single\r\n    }\r\n  }))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.serial('Metric#findByAgentUuid', async t => {\r\n  let metrics = await db.Metric.findByAgentUuid(uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(uuidArgs), 'findAll should be called with uuid args')\r\n\r\n  t.deepEqual(metrics, metricFixtures.findByAgentId(2), 'metrics should be the same')\r\n})\r\n\r\ntest.serial('Metric#findByTypeAgentUuid', async t => {\r\n  let metrics = await db.Metric.findByTypeAgentUuid(type, uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(agentUuidArgs), 'findAll should be called with type,uuid args')\r\n\r\n  t.deepEqual(metrics, metricFixtures.findByAgentType(type, id), 'metrics should be the same')\r\n})\r\n\r\ntest.serial('Metric#create - new', async t => {\r\n  let metric = await db.Metric.create(uuid, metricTest)\r\n\r\n  t.deepEqual(metric, metricFixtures.single, 'metrics should be the same')\r\n})\r\n"]}