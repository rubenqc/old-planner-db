{"version":3,"sources":["tests/region-test.js"],"names":["test","require","sinon","proxyquire","datacenterFixtures","regionFixtures","config","logging","db","sandbox","DatacenterStub","RegionStub","DateStub","hasMany","spy","TypeStub","belongsTo","ClassStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","datacenterId","condDatacenterArgs","where","regionId","single","region","condRegionArgs","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","update","setupDatabase","afterEach","restore","t","truthy","Region","true","called","callCount","calledWith","calledOnce","serial","createOrUpdate","calledTwice","deepEqual"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst datacenterFixtures = require('./fixtures/region')\nconst regionFixtures = require('./fixtures/region')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet DatacenterStub = null\nlet RegionStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet datacenterId = 1\nlet condDatacenterArgs = {\n  where: {\n    datacenterId\n  }\n}\n\n// let newDatacenterId = 5\n// let condNewDatacenter = {\n//   where: { datacenterId: newDatacenterId }\n// }\n\nlet regionId = regionFixtures.single.region\nlet condRegionArgs = {\n  where: {\n    region: regionId\n  }\n}\n\n// let newDatacenter = {\n//   id: 8,\n//   nombre: 'lalolalocura',\n//   datacenterId\n// }\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  RegionStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  DatacenterStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n\n    // Class#Model findOne Stub\n    DatacenterStub.findOne = sandbox.stub()\n    DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single))\n  //   DatacenterStub.findOne.withArgs(condNewDatacenter).returns(Promise.resolve(datacenterFixtures.findByDatacenterMain(newDatacenterId)))\n    // Type#Model findOne Stub\n    RegionStub.findOne = sandbox.stub()\n    RegionStub.findOne.withArgs(condRegionArgs).returns(Promise.resolve(regionFixtures.single))\n    // Type#Model update Stub\n    RegionStub.update = sandbox.stub()\n    RegionStub.update.withArgs(regionFixtures.single, condRegionArgs).returns(Promise.resolve(regionFixtures.single))\n  //   // Type#Model create Stub\n  //   RegionStub.create = sandbox.stub()\n  //   RegionStub.create.withArgs(newDatacenter).returns(Promise.resolve({\n  //     toJSON () {\n  //       return newDatacenter\n  //     }\n  //   }))\n  //   // Class#Model findAll Stub\n  //   RegionStub.findAll = sandbox.stub()\n  //   RegionStub.findAll.withArgs().returns(Promise.resolve(regionFixtures.findAll))\n  //   RegionStub.findAll.withArgs({\n  //     attributes: ['region', 'nombre'],\n  //     group: ['region'],\n  //     include: [{\n  //       attributes: [],\n  //       model: DatacenterStub,\n  //       where: {\n  //         datacenterId: datacenterId\n  //       }\n  //     }],\n  //     raw: true\n  //   }).returns(Promise.resolve(regionFixtures.findByDatacenterMainId(datacenterId)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Region', t => {\n  t.truthy(db.Region, 'Region service should exist')\n})\n\ntest('Setup', t => {\n  t.true(RegionStub.hasMany.called, 'DatacenterModel.hasMany was execute')\n  t.true(RegionStub.hasMany.callCount === 6, 'hasMany should be called once')\n  t.true(RegionStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel args')\n  t.true(RegionStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel args')\n  t.true(RegionStub.hasMany.calledWith(GbStub), 'Argument needs should be the GbModel args')\n  t.true(RegionStub.hasMany.calledWith(ThStub), 'Argument needs should be the ThModel args')\n  t.true(RegionStub.hasMany.calledWith(SauStub), 'Argument needs should be the SauModel args')\n  t.true(RegionStub.hasMany.calledWith(PdpStub), 'Argument needs should be the PdpModel args')\n  t.true(RegionStub.belongsTo.called, 'DatacenterModel.belongsTo was executed')\n  t.true(RegionStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(RegionStub.belongsTo.calledWith(DatacenterStub), 'RegionModel.belongsTo should be called with DatacenterMainModel args')\n})\n\ntest.serial('Region#createOrUpdate - exist', async t => {\n  const region = await db.Region.createOrUpdate(regionFixtures.single, datacenterId)\n\n  t.true(DatacenterStub.findOne.called, 'DatacenterMainModel.findOne was execute')\n  t.true(DatacenterStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')\n  t.true(DatacenterStub.findOne.calledWith(condRegionArgs), 'findOne should be called with condArgs args')\n  t.true(RegionStub.findOne.called, 'Region.findOne was execute')\n  t.true(RegionStub.findOne.calledTwice, 'Region#findOne should be called once')\n  t.true(RegionStub.findOne.calledWith(condRegionArgs), 'findOne should be called with tipo Args')\n  t.true(RegionStub.update.called, 'update should be called')\n  t.true(RegionStub.update.calledOnce, 'update should be called once')\n  t.true(RegionStub.update.calledWith(regionFixtures.single, condRegionArgs), 'update should be called with single, cond Args')\n\n  t.deepEqual(region, regionFixtures.single, 'should be the same')\n})\n\n// test.serial('Region#createOrUpdate - new', async t => {\n//   const region = await db.Region.createOrUpdate(newDatacenter, datacenterId)\n\n//   t.true(DatacenterStub.findOne.called, 'DatacenterMainModel.findOne was execute')\n//   t.true(DatacenterStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')\n//   t.true(DatacenterStub.findOne.calledWith(condRegionArgs), 'findOne should be called with condArgs args')\n//   t.true(RegionStub.findOne.called, 'Region.findOne was execute')\n//   t.true(RegionStub.findOne.calledOnce, 'Region#findOne should be called once')\n//   t.true(RegionStub.findOne.calledWith({ where: { region: newDatacenter.region } }), 'findOne should be called with newDatacenter Args')\n//   t.true(RegionStub.create.calledOnce, 'create should be called once')\n//   t.true(RegionStub.create.calledWith(newDatacenter), 'create should be called with newDatacenter args')\n\n//   t.deepEqual(region, newDatacenter, 'should be the same')\n// })\n\n// test.serial('Region#createOrUpdate - datacenterMain no exist', async t => {\n//   const region = await db.Region.createOrUpdate(newDatacenter, newDatacenterId)\n\n//   t.true(DatacenterStub.findOne.called, 'DatacenterMain.findOne was execute')\n//   t.true(DatacenterStub.findOne.calledOnce, ' findOne should be called once')\n//   t.true(DatacenterStub.findOne.calledWith(condNewDatacenter), 'findOne should be called with condNewDatacenter args')\n\n//   t.deepEqual(region, datacenterFixtures.findByDatacenterMain(newDatacenterId), 'should be the same')\n// })\n\n// test.serial('Region#findAll', async t => {\n//   let datacenters = await db.Region.findAll()\n\n//   t.true(RegionStub.findAll.called, 'findAll should be called')\n//   t.true(RegionStub.findAll.calledOnce, 'findAll should be called once')\n//   t.true(RegionStub.findAll.calledWith(), 'findAll should be called without any args')\n\n//   t.deepEqual(datacenters, regionFixtures.findAll, 'Classes should be the same')\n// })\n\n// test.serial('Region#findByDatacenterMain', async t => {\n//   let datacenters = await db.Region.findByDatacenterMain(datacenterId)\n//   t.true(RegionStub.findAll.called, 'findAll should be called')\n//   t.true(RegionStub.findAll.calledOnce, 'findAll should be called once')\n\n//   t.deepEqual(datacenters, regionFixtures.findByDatacenterMainId(datacenterId), 'should be the same')\n// })\n"]}