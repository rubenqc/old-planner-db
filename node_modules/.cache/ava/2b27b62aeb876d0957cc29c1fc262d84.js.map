{"version":3,"sources":["tests/type-test.js"],"names":["test","require","sinon","proxyquire","typeFixtures","classFixtures","config","logging","db","sandbox","TypeStub","ClassStub","DateStub","hasMany","spy","RegionStub","belongsTo","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","classId","condArgs","where","clase","newType","tipo","nombre","newCondArgs","newClassId","newCondClass","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","findByClass","single","update","create","toJSON","findAll","attributes","group","include","model","raw","findByClassId","setupDatabase","afterEach","restore","t","truthy","Type","true","called","calledTwice","calledWith","calledOnce","serial","type","createOrUpdate","deepEqual","types"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,YAAY,GAAGH,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIK,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAIA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,SAAS,GAAG,IAAhB,C,CAEA;;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,OAAO,EAAEX,KAAK,CAACY,GAAN;AADI,CAAf;AAGA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADI;AAEfD,EAAAA,OAAO,EAAEX,KAAK,CAACY,GAAN;AAFM,CAAjB;AAIA,IAAIG,cAAc,GAAG;AACnBD,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADQ;AAEnBD,EAAAA,OAAO,EAAEX,KAAK,CAACY,GAAN;AAFU,CAArB;AAIA,IAAII,kBAAkB,GAAG;AACvBL,EAAAA,OAAO,EAAEX,KAAK,CAACY,GAAN;AADc,CAAzB;AAIA,IAAIK,SAAS,GAAG;AACdH,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADG,CAAhB;AAGA,IAAIM,WAAW,GAAG;AAChBJ,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADK,CAAlB;AAGA,IAAIO,MAAM,GAAG;AACXL,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADA,CAAb;AAGA,IAAIQ,uBAAuB,GAAG;AAC5BN,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADiB,CAI9B;;AAJ8B,CAA9B;AAKA,IAAIS,OAAO,GAAG;AACZP,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADC,CAAd;AAGA,IAAIU,OAAO,GAAG;AACZR,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADC,CAAd;AAGA,IAAIW,MAAM,GAAG;AACXT,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADA,CAIb;;AAJa,CAAb;AAKA,IAAIY,OAAO,GAAG;AACZV,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADC,CAAd;AAGA,IAAIa,QAAQ,GAAG;AACbX,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADE,CAAf;AAGA,IAAIc,QAAQ,GAAG;AACbZ,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADE,CAIf;;AAJe,CAAf;AAKA,IAAIe,UAAU,GAAG;AACfb,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADI,CAAjB;AAGA,IAAIgB,YAAY,GAAG;AACjBd,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADM,CAAnB;AAGA,IAAIiB,WAAW,GAAG;AAChBf,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN;AADK,CAAlB;AAGA,IAAIkB,WAAW,GAAG;AAChBhB,EAAAA,SAAS,EAAEd,KAAK,CAACY,GAAN,EADK,CAIlB;;AAJkB,CAAlB;AAKA,IAAImB,OAAO,GAAG,CAAd;AACA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEH;AADF,GADM,CAKf;;AALe,CAAf;AAMA,IAAII,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,CADM;AAEZC,EAAAA,MAAM,EAAE;AAFI,CAAd;AAIA,IAAIC,WAAW,GAAG;AAChBL,EAAAA,KAAK,EAAE;AACLG,IAAAA,IAAI,EAAED,OAAO,CAACC;AADT;AADS,CAAlB;AAMA,IAAIG,UAAU,GAAG,CAAjB;AACA,IAAIC,YAAY,GAAG;AACjBP,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEK;AADF;AADU,CAAnB;AAMAzC,IAAI,CAAC2C,UAAL,CAAgB,YAAY;AAC1BlC,EAAAA,OAAO,GAAGP,KAAK,CAAC0C,aAAN,EAAV;AACAlC,EAAAA,QAAQ,GAAG;AACTG,IAAAA,OAAO,EAAEJ,OAAO,CAACK,GAAR,EADA;AAETE,IAAAA,SAAS,EAAEP,OAAO,CAACK,GAAR;AAFF,GAAX;AAIAH,EAAAA,SAAS,GAAG;AACVE,IAAAA,OAAO,EAAEJ,OAAO,CAACK,GAAR,EADC,CAIZ;;AAJY,GAAZ;AAKAH,EAAAA,SAAS,CAACkC,OAAV,GAAoBpC,OAAO,CAACqC,IAAR,EAApB;AACAnC,EAAAA,SAAS,CAACkC,OAAV,CAAkBE,QAAlB,CAA2Bb,QAA3B,EAAqCc,OAArC,CAA6CC,OAAO,CAACC,OAAR,CAAgB7C,aAAa,CAAC8C,WAAd,CAA0BlB,OAA1B,CAAhB,CAA7C;AACAtB,EAAAA,SAAS,CAACkC,OAAV,CAAkBE,QAAlB,CAA2BL,YAA3B,EAAyCM,OAAzC,CAAiDC,OAAO,CAACC,OAAR,CAAgB7C,aAAa,CAAC8C,WAAd,CAA0BV,UAA1B,CAAhB,CAAjD,EAb0B,CAc1B;;AACA/B,EAAAA,QAAQ,CAACmC,OAAT,GAAmBpC,OAAO,CAACqC,IAAR,EAAnB;AACApC,EAAAA,QAAQ,CAACmC,OAAT,CAAiBE,QAAjB,CAA0B;AAAEZ,IAAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAElC,YAAY,CAACgD,MAAb,CAAoBd;AAA5B;AAAT,GAA1B,EAAyEU,OAAzE,CAAiFC,OAAO,CAACC,OAAR,CAAgB9C,YAAY,CAACgD,MAA7B,CAAjF,EAhB0B,CAiB1B;;AACA1C,EAAAA,QAAQ,CAAC2C,MAAT,GAAkB5C,OAAO,CAACqC,IAAR,EAAlB;AACApC,EAAAA,QAAQ,CAAC2C,MAAT,CAAgBN,QAAhB,CAAyB3C,YAAY,CAACgD,MAAtC,EAA8C;AAAEjB,IAAAA,KAAK,EAAE;AAAEG,MAAAA,IAAI,EAAElC,YAAY,CAACgD,MAAb,CAAoBd;AAA5B;AAAT,GAA9C,EAA6FU,OAA7F,CAAqGC,OAAO,CAACC,OAAR,CAAgB9C,YAAY,CAACgD,MAA7B,CAArG,EAnB0B,CAoB1B;;AACA1C,EAAAA,QAAQ,CAAC4C,MAAT,GAAkB7C,OAAO,CAACqC,IAAR,EAAlB;AACApC,EAAAA,QAAQ,CAAC4C,MAAT,CAAgBP,QAAhB,CAAyBV,OAAzB,EAAkCW,OAAlC,CAA0CC,OAAO,CAACC,OAAR,CAAgB;AACxDK,IAAAA,MAAM,GAAI;AACR,aAAOlB,OAAP;AACD;;AAHuD,GAAhB,CAA1C,EAtB0B,CA2B1B;;AACA3B,EAAAA,QAAQ,CAAC8C,OAAT,GAAmB/C,OAAO,CAACqC,IAAR,EAAnB;AACApC,EAAAA,QAAQ,CAAC8C,OAAT,CAAiBT,QAAjB,GAA4BC,OAA5B,CAAoCC,OAAO,CAACC,OAAR,CAAgB9C,YAAY,CAACoD,OAA7B,CAApC;AACA9C,EAAAA,QAAQ,CAAC8C,OAAT,CAAiBT,QAAjB,CAA0B;AACxBU,IAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,QAAT,CADY;AAExBC,IAAAA,KAAK,EAAE,CAAC,MAAD,CAFiB;AAGxBC,IAAAA,OAAO,EAAE,CAAC;AACRF,MAAAA,UAAU,EAAE,EADJ;AAERG,MAAAA,KAAK,EAAEjD,SAFC;AAGRwB,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEH;AADF;AAHC,KAAD,CAHe;AAUxB4B,IAAAA,GAAG,EAAE;AAVmB,GAA1B,EAWGb,OAXH,CAWWC,OAAO,CAACC,OAAR,CAAgB9C,YAAY,CAAC0D,aAAb,CAA2B7B,OAA3B,CAAhB,CAXX;AAaA,QAAM8B,aAAa,GAAG5D,UAAU,CAAC,KAAD,EAAQ;AACtC,8BAA0B,MAAMgB,SADM;AAEtC,gCAA4B,MAAMC,WAFI;AAGtC,2BAAuB,MAAMC,MAHS;AAItC,6CAAyC,MAAMC,uBAJT;AAMtC,6BAAyB,MAAMV,QANO;AAOtC,6BAAyB,MAAMF,QAPO;AAQtC,8BAA0B,MAAMC,SARM;AAStC,+BAA2B,MAAMI,UATK;AAUtC,mCAA+B,MAAME,cAVC;AAWtC,wCAAoC,MAAMC,kBAXJ;AAatC,4BAAwB,MAAMK,OAbQ;AActC,4BAAwB,MAAMC,OAdQ;AAetC,2BAAuB,MAAMC,MAfS;AAiBtC,yBAAqB,MAAMC,OAjBW;AAkBtC,0BAAsB,MAAMC,QAlBU;AAmBtC,0BAAsB,MAAMC,QAnBU;AAqBtC,gCAA4B,MAAMC,UArBI;AAsBtC,iCAA6B,MAAMC,YAtBG;AAuBtC,gCAA4B,MAAMC,WAvBI;AAwBtC,gCAA4B,MAAMC;AAxBI,GAAR,CAAhC;AA2BAxB,EAAAA,EAAE,GAAG,MAAMuD,aAAa,CAACzD,MAAD,CAAxB;AACD,CAvED;AAyEAN,IAAI,CAACgE,SAAL,CAAe,MAAM;AACnBvD,EAAAA,OAAO,IAAIA,OAAO,CAACwD,OAAR,EAAX;AACD,CAFD;AAIAjE,IAAI,CAAC,MAAD,EAASkE,CAAC,IAAI;AAAA;;AAChBA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAA3D,EAAE,uBAAF,CAAG4D,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkB,2BAAlB;AACD,CAFG,CAAJ;AAIApE,IAAI,CAAC,OAAD,EAAUkE,CAAC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACjBA,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,8BAAR,CAASG,OAAT,wBAAiByD,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,+BAAhC;AACAJ,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,8BAAR,CAASG,OAAT,wBAAiB0D,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,gCAArC;AACAL,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,qCAAR,CAASG,OAAT,+BAAiB2D,UAAjB,aAA4BrD,SAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+C,yCAA/C;AACA+C,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,qCAAR,CAASG,OAAT,+BAAiB2D,UAAjB,aAA4BpD,WAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,2CAAjD;AACA8C,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,8BAAR,CAASM,SAAT,wBAAmBsD,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,kCAAlC;AACAJ,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,8BAAR,CAASM,SAAT,wBAAmByD,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,iCAAtC;AACAP,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA3D,QAAQ,qCAAR,CAASM,SAAT,+BAAmBwD,UAAnB,aAA8B7D,SAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,0DAAjD;AACD,CARG,CAAJ;AAUAX,IAAI,CAAC0E,MAAL,CAAY,6BAAZ,EAA2C,MAAMR,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACpD,QAAMS,IAAI,GAAG,MAAMnE,EAAE,CAAC4D,IAAH,CAAQQ,cAAR,CAAuBxE,YAAY,CAACgD,MAApC,EAA4CnB,OAA5C,CAAnB;AAEAiC,EAAAA,CAAC,CAACG,IAAF,yBAAO,wBAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkByB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,gCAAjC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkB4B,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,gCAArC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,qCAAT,CAAUkC,OAAV,+BAAkB2B,UAAlB,cAA6BtC,QAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+C,6CAA/C;AACAgC,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAASmC,OAAT,wBAAiByB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,+BAAhC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAASmC,OAAT,wBAAiB0B,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,gCAArC;AACAL,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,qCAAR,CAASmC,OAAT,+BAAiB2B,UAAjB,cAA4B;AAAErC,IAAAA,KAAK,eAAE;AAAEG,MAAAA,IAAI,eAAE,0BAAAlC,YAAY,gFAAZ,CAAagD,MAAb,0EAAoBd,IAAtB;AAAN,KAAF;AAAP,GAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmF,yCAAnF;AACA4B,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS2C,MAAT,wBAAgBiB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,yBAA/B;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS2C,MAAT,wBAAgBoB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmC,8BAAnC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,qCAAR,CAAS2C,MAAT,+BAAgBmB,UAAhB,cAA2B,aAAApE,YAAY,mCAAZ,CAAagD,MAAxC,2CAAgD;AAAEjB,IAAAA,KAAK,eAAE;AAAEG,MAAAA,IAAI,eAAE,0BAAAlC,YAAY,gFAAZ,CAAagD,MAAb,0EAAoBd,IAAtB;AAAN,KAAF;AAAP,GAAhD,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuG,gDAAvG;AAEA4B,EAAAA,CAAC,CAACW,SAAF,CAAYF,IAAZ,EAAkBvE,YAAY,CAACgD,MAA/B,EAAuC,oBAAvC;AACD,CAdD;AAgBApD,IAAI,CAAC0E,MAAL,CAAY,2BAAZ,EAAyC,MAAMR,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAClD,QAAMS,IAAI,GAAG,MAAMnE,EAAE,CAAC4D,IAAH,CAAQQ,cAAR,CAAuBvC,OAAvB,EAAgCJ,OAAhC,CAAnB;AAEAiC,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkByB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,gCAAjC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkB4B,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,gCAArC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,qCAAT,CAAUkC,OAAV,+BAAkB2B,UAAlB,cAA6BtC,QAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+C,6CAA/C;AACAgC,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAASmC,OAAT,wBAAiByB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,0BAAhC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAASmC,OAAT,wBAAiB4B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,qCAAR,CAASmC,OAAT,+BAAiB2B,UAAjB,cAA4BhC,WAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,4CAAjD;AACA0B,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS4C,MAAT,wBAAgBgB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+B,yBAA/B;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS4C,MAAT,wBAAgBmB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmC,8BAAnC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,qCAAR,CAAS4C,MAAT,+BAAgBkB,UAAhB,cAA2BnC,OAA3B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA4C,4CAA5C;AAEA6B,EAAAA,CAAC,CAACW,SAAF,CAAYF,IAAZ,EAAkBtC,OAAlB,EAA2B,oBAA3B;AACD,CAdD;AAgBArC,IAAI,CAAC0E,MAAL,CAAY,sCAAZ,EAAoD,MAAMR,CAAN,IAAW;AAAA;AAAA;AAAA;;AAC7D,QAAMS,IAAI,GAAG,MAAMnE,EAAE,CAAC4D,IAAH,CAAQQ,cAAR,CAAuBvC,OAAvB,EAAgCI,UAAhC,CAAnB;AAEAyB,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkByB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,gCAAjC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,8BAAT,CAAUkC,OAAV,wBAAkB4B,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,gCAArC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA1D,SAAS,qCAAT,CAAUkC,OAAV,+BAAkB2B,UAAlB,cAA6B9B,YAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,6CAAnD;AAEAwB,EAAAA,CAAC,CAACW,SAAF,CAAYF,IAAZ,EAAkB,CAAlB,EAAqB,oBAArB;AACD,CARD;AAUA3E,IAAI,CAAC0E,MAAL,CAAY,cAAZ,EAA4B,MAAMR,CAAN,IAAW;AAAA;AAAA;AAAA;;AACrC,MAAIY,KAAK,GAAG,MAAMtE,EAAE,CAAC4D,IAAH,CAAQZ,OAAR,EAAlB;AAEAU,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS8C,OAAT,wBAAiBc,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,0BAAhC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS8C,OAAT,wBAAiBiB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AACAP,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,qCAAR,CAAS8C,OAAT,+BAAiBgB,UAAjB,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,2CAAtC;AAEAN,EAAAA,CAAC,CAACW,SAAF,CAAYC,KAAZ,EAAmB1E,YAAY,CAACoD,OAAhC,EAAyC,4BAAzC;AACD,CARD;AAUAxD,IAAI,CAAC0E,MAAL,CAAY,kBAAZ,EAAgC,MAAMR,CAAN,IAAW;AAAA;AAAA;;AACzC,MAAIY,KAAK,GAAG,MAAMtE,EAAE,CAAC4D,IAAH,CAAQjB,WAAR,CAAoBlB,OAApB,CAAlB;AAEAiC,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS8C,OAAT,wBAAiBc,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,0BAAhC;AACAJ,EAAAA,CAAC,CAACG,IAAF,2BAAO,0BAAA3D,QAAQ,8BAAR,CAAS8C,OAAT,wBAAiBiB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AAEAP,EAAAA,CAAC,CAACW,SAAF,CAAYC,KAAZ,EAAmB1E,YAAY,CAAC0D,aAAb,CAA2B7B,OAA3B,CAAnB,EAAwD,0BAAxD;AACD,CAPD","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst typeFixtures = require('./fixtures/type')\nconst classFixtures = require('./fixtures/class')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet TypeStub = null\nlet ClassStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\n// Argumentos para la clase\nlet classId = 1\nlet condArgs = {\n  where: {\n    clase: classId\n  }\n}\n// Argumentos para el tipo\nlet newType = {\n  tipo: 9,\n  nombre: 'no-existes'\n}\nlet newCondArgs = {\n  where: {\n    tipo: newType.tipo\n  }\n}\n\nlet newClassId = 3\nlet newCondClass = {\n  where: {\n    clase: newClassId\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  TypeStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n  ClassStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  ClassStub.findOne = sandbox.stub()\n  ClassStub.findOne.withArgs(condArgs).returns(Promise.resolve(classFixtures.findByClass(classId)))\n  ClassStub.findOne.withArgs(newCondClass).returns(Promise.resolve(classFixtures.findByClass(newClassId)))\n  // Type#Model findOne Stub\n  TypeStub.findOne = sandbox.stub()\n  TypeStub.findOne.withArgs({ where: { tipo: typeFixtures.single.tipo } }).returns(Promise.resolve(typeFixtures.single))\n  // Type#Model update Stub\n  TypeStub.update = sandbox.stub()\n  TypeStub.update.withArgs(typeFixtures.single, { where: { tipo: typeFixtures.single.tipo } }).returns(Promise.resolve(typeFixtures.single))\n  // Type#Model create Stub\n  TypeStub.create = sandbox.stub()\n  TypeStub.create.withArgs(newType).returns(Promise.resolve({\n    toJSON () {\n      return newType\n    }\n  }))\n  // Type#Model findAll Stub\n  TypeStub.findAll = sandbox.stub()\n  TypeStub.findAll.withArgs().returns(Promise.resolve(typeFixtures.findAll))\n  TypeStub.findAll.withArgs({\n    attributes: ['tipo', 'nombre'],\n    group: ['tipo'],\n    include: [{\n      attributes: [],\n      model: ClassStub,\n      where: {\n        clase: classId\n      }\n    }],\n    raw: true\n  }).returns(Promise.resolve(typeFixtures.findByClassId(classId)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Type', t => {\n  t.truthy(db.Type, 'Type service should exist')\n})\n\ntest('Setup', t => {\n  t.true(TypeStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(TypeStub.hasMany.calledTwice, 'hasMany should be called twice')\n  t.true(TypeStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n  t.true(TypeStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n  t.true(TypeStub.belongsTo.called, 'TypeModel.belongsTo was executed')\n  t.true(TypeStub.belongsTo.calledOnce, 'belongsTo should be called once')\n  t.true(TypeStub.belongsTo.calledWith(ClassStub), 'TypeModel.belongsTo should be called with ClassStub args')\n})\n\ntest.serial('Type#createOrUpdate - exist', async t => {\n  const type = await db.Type.createOrUpdate(typeFixtures.single, classId)\n\n  t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')\n  t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')\n  t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')\n  t.true(TypeStub.findOne.called, 'TypeModel.findOne was execute')\n  t.true(TypeStub.findOne.calledTwice, 'findOne should be called twice')\n  t.true(TypeStub.findOne.calledWith({ where: { tipo: typeFixtures.single.tipo } }), 'findOne should be called with tipo Args')\n  t.true(TypeStub.update.called, 'update should be called')\n  t.true(TypeStub.update.calledOnce, 'update should be called once')\n  t.true(TypeStub.update.calledWith(typeFixtures.single, { where: { tipo: typeFixtures.single.tipo } }), 'update should be called with single, cond Args')\n\n  t.deepEqual(type, typeFixtures.single, 'should be the same')\n})\n\ntest.serial('Type#createOrUpdate - new', async t => {\n  const type = await db.Type.createOrUpdate(newType, classId)\n\n  t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')\n  t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')\n  t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')\n  t.true(TypeStub.findOne.called, 'findOne should be called')\n  t.true(TypeStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(TypeStub.findOne.calledWith(newCondArgs), 'findOne should be called with newCond Args')\n  t.true(TypeStub.create.called, 'create should be called')\n  t.true(TypeStub.create.calledOnce, 'create should be called once')\n  t.true(TypeStub.create.calledWith(newType), 'create should be called with newClass args')\n\n  t.deepEqual(type, newType, 'should be the same')\n})\n\ntest.serial('Type#createOrUpdate - class no exist', async t => {\n  const type = await db.Type.createOrUpdate(newType, newClassId)\n\n  t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')\n  t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')\n  t.true(ClassStub.findOne.calledWith(newCondClass), 'findOne should be called with condArgs args')\n\n  t.deepEqual(type, 1, 'should be the same')\n})\n\ntest.serial('Type#findAll', async t => {\n  let types = await db.Type.findAll()\n\n  t.true(TypeStub.findAll.called, 'findAll should be called')\n  t.true(TypeStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(TypeStub.findAll.calledWith(), 'findAll should be called without any args')\n\n  t.deepEqual(types, typeFixtures.findAll, 'Classes should be the same')\n})\n\ntest.serial('Type#findByClass', async t => {\n  let types = await db.Type.findByClass(classId)\n\n  t.true(TypeStub.findAll.called, 'findAll should be called')\n  t.true(TypeStub.findAll.calledOnce, 'findAll should be called once')\n\n  t.deepEqual(types, typeFixtures.findByClassId(classId), 'types should be the same')\n})\n"]}