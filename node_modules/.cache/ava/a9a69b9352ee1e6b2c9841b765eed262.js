'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const metricFixtures = require('./fixtures/metric');

const agentFixtures = require('./fixtures/agent');

let config = {
  logging: function () {}
};
let uuid = 'yyy-yyy-yyw';
let id = 2;
let MetricStub = null;
let AgentStub = null;
let sandbox = null;
let db = null;
let type = 'temperatura';
let uuidArgs = null;
let agentUuidArgs = null;
let metricTest = {
  type: 'temperatura',
  value: 15.2
};
let metricTestCreate = {
  type: 'temperatura',
  value: 15.2,
  agentId: 1
};
let createArgs = {
  where: {
    uuid
  }
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  MetricStub = {
    belongsTo: sandbox.spy()
  };
  AgentStub = {
    hasMany: sandbox.spy()
  };
  agentUuidArgs = {
    attributes: ['id', 'type', 'value', 'createdAt'],
    where: {
      type
    },
    limit: 20,
    order: [['createdAt', 'DESC']],
    include: [{
      attributes: [],
      model: AgentStub,
      where: {
        uuid
      }
    }],
    raw: true
  };
  uuidArgs = {
    attributes: ['type'],
    group: ['type'],
    include: [{
      attributes: [],
      model: AgentStub,
      where: {
        uuid
      }
    }],
    raw: true // Metric findAll

  };
  MetricStub.findAll = sandbox.stub();
  MetricStub.findAll.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.findByAgentId(id)));
  MetricStub.findAll.withArgs(agentUuidArgs).returns(Promise.resolve(metricFixtures.findByAgentType(type, id))); // Agent findOne

  AgentStub.findOne = sandbox.stub();
  AgentStub.findOne.withArgs(createArgs).returns(Promise.resolve(agentFixtures.single)); // Metric create

  MetricStub.create = sandbox.stub();
  MetricStub.create.withArgs(metricTestCreate).returns(Promise.resolve({
    toJSON() {
      return metricFixtures.single;
    }

  }));
  const setupDatabase = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.serial('Metric#findByAgentUuid', async t => {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder();

  let metrics = await db.Metric.findByAgentUuid(uuid);
  t.true(_rec._expr(_rec._capt(_rec._capt(_rec._capt(MetricStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(MetricStub.findAll.called, 'findAll should be called on model')",
    filepath: "tests/metric-tests.js",
    line: 108,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called on model\",\"range\":[34,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[26,32]},{\"type\":{\"label\":\",\"},\"range\":[32,33]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called on model\",\"range\":[34,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(MetricStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/metric-tests.js",
    line: 109,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[38,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[26,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[38,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(MetricStub, "arguments/0/callee/object/object").findAll, "arguments/0/callee/object").calledWith(_rec3._capt(uuidArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(MetricStub.findAll.calledWith(uuidArgs), 'findAll should be called with uuid args')",
    filepath: "tests/metric-tests.js",
    line: 110,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"uuidArgs\",\"range\":[37,45]}],\"range\":[7,46]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called with uuid args\",\"range\":[48,89]}],\"range\":[0,90]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"uuidArgs\",\"range\":[37,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]},{\"type\":{\"label\":\",\"},\"range\":[46,47]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called with uuid args\",\"range\":[48,89]},{\"type\":{\"label\":\")\"},\"range\":[89,90]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called with uuid args');
  t.deepEqual(metrics, metricFixtures.findByAgentId(2), 'metrics should be the same');
});
test.serial('Metric#findByTypeAgentUuid', async t => {
  var _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder();

  let metrics = await db.Metric.findByTypeAgentUuid(type, uuid);
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(MetricStub.findAll.called, 'findAll should be called on model')",
    filepath: "tests/metric-tests.js",
    line: 118,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called on model\",\"range\":[34,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[26,32]},{\"type\":{\"label\":\",\"},\"range\":[32,33]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called on model\",\"range\":[34,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called on model');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/metric-tests.js",
    line: 119,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[38,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[26,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[38,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(MetricStub, "arguments/0/callee/object/object").findAll, "arguments/0/callee/object").calledWith(_rec6._capt(agentUuidArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(MetricStub.findAll.calledWith(agentUuidArgs), 'findAll should be called with type,uuid args')",
    filepath: "tests/metric-tests.js",
    line: 120,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"MetricStub\",\"range\":[7,17]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[18,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"agentUuidArgs\",\"range\":[37,50]}],\"range\":[7,51]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called with type,uuid args\",\"range\":[53,99]}],\"range\":[0,100]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"MetricStub\",\"range\":[7,17]},{\"type\":{\"label\":\".\"},\"range\":[17,18]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[18,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"agentUuidArgs\",\"range\":[37,50]},{\"type\":{\"label\":\")\"},\"range\":[50,51]},{\"type\":{\"label\":\",\"},\"range\":[51,52]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called with type,uuid args\",\"range\":[53,99]},{\"type\":{\"label\":\")\"},\"range\":[99,100]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called with type,uuid args');
  t.deepEqual(metrics, metricFixtures.findByAgentType(type, id), 'metrics should be the same');
});
test.serial('Metric#create - new', async t => {
  let metric = await db.Metric.create(uuid, metricTest);
  t.deepEqual(metric, metricFixtures.single, 'metrics should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/a9a69b9352ee1e6b2c9841b765eed262.js.map