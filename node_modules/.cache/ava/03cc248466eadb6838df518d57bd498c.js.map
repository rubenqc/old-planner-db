{"version":3,"sources":["tests/type-test.js"],"names":["test","require","sinon","proxyquire","config","logging","db","sandbox","TypeStub","DateStub","hasMany","spy","ClassStub","RegionStub","belongsTo","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","beforeEach","createSandbox","setupDatabase","afterEach","restore","t","true","called","callTwice","calledWith"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet TypeStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet ClassStub = {\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  TypeStub = {\n    hasMany: sandbox.spy(),\n    belongsTo: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Type', t => {\n  t.true(TypeStub.hasMany.called, 'TypeModel.hasMany was execute')\n  t.true(TypeStub.hasMany.callTwice, 'hasMany should be called 14 times')\n  t.true(TypeStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')\n  t.true(TypeStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')\n\n})\n"]}