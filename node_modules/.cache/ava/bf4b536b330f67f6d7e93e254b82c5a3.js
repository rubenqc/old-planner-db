'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const classFixtures = require('./fixtures/class');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let ClassStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let TypeStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let RegionStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterMainStub = {
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy()
};
let clase = 1;
let condArgs = {
  where: {
    clase
  }
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  ClassStub = {
    hasMany: sandbox.spy() // Class#Model findOne Stub

  };
  ClassStub.findOne = sandbox.stub();
  ClassStub.findOne.withArgs(condArgs).returns(Promise.resolve(classFixtures.single)); // Class#Model update Stub

  ClassStub.update = sandbox.stub();
  ClassStub.update.withArgs(classFixtures.single, condArgs).returns(Promise.resolve(classFixtures.single));
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Class', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").ClassClase, "arguments/0"), {
    content: "t.truthy(db.ClassClase, 'Class service should exits.')",
    filepath: "tests/class-tests.js",
    line: 142,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"ClassClase\",\"range\":[12,22]},\"computed\":false,\"range\":[9,22]},{\"type\":\"StringLiteral\",\"value\":\"Class service should exits.\",\"range\":[24,53]}],\"range\":[0,54]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassClase\",\"range\":[12,22]},{\"type\":{\"label\":\",\"},\"range\":[22,23]},{\"type\":{\"label\":\"string\"},\"value\":\"Class service should exits.\",\"range\":[24,53]},{\"type\":{\"label\":\")\"},\"range\":[53,54]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Class service should exits.');
});
test('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(ClassStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(ClassStub.hasMany.called, 'ClassModel.hasMany was executed')",
    filepath: "tests/class-tests.js",
    line: 146,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[25,31]},\"computed\":false,\"range\":[7,31]},{\"type\":\"StringLiteral\",\"value\":\"ClassModel.hasMany was executed\",\"range\":[33,66]}],\"range\":[0,67]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[25,31]},{\"type\":{\"label\":\",\"},\"range\":[31,32]},{\"type\":{\"label\":\"string\"},\"value\":\"ClassModel.hasMany was executed\",\"range\":[33,66]},{\"type\":{\"label\":\")\"},\"range\":[66,67]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'ClassModel.hasMany was executed');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt(ClassStub, "arguments/0/left/object/object").hasMany, "arguments/0/left/object").callCount, "arguments/0/left") === 13, "arguments/0"), {
    content: "t.true(ClassStub.hasMany.callCount === 13, 'hasMany should be called 13 times')",
    filepath: "tests/class-tests.js",
    line: 147,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"BinaryExpression\",\"operator\":\"===\",\"left\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"callCount\",\"range\":[25,34]},\"computed\":false,\"range\":[7,34]},\"right\":{\"type\":\"NumericLiteral\",\"value\":13,\"range\":[39,41]},\"range\":[7,41]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called 13 times\",\"range\":[43,78]}],\"range\":[0,79]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"callCount\",\"range\":[25,34]},{\"type\":{\"label\":\"==/!=\"},\"value\":\"===\",\"range\":[35,38]},{\"type\":{\"label\":\"num\"},\"value\":13,\"range\":[39,41]},{\"type\":{\"label\":\",\"},\"range\":[41,42]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called 13 times\",\"range\":[43,78]},{\"type\":{\"label\":\")\"},\"range\":[78,79]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called 13 times');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(TypeStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(TypeStub), 'Argument needs should be TypeModel')",
    filepath: "tests/class-tests.js",
    line: 148,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be TypeModel\",\"range\":[47,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be TypeModel\",\"range\":[47,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be TypeModel');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec5._capt(GbStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(GbStub), 'Argument needs should be GbModel')",
    filepath: "tests/class-tests.js",
    line: 149,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"GbStub\",\"range\":[36,42]}],\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be GbModel\",\"range\":[45,79]}],\"range\":[0,80]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"GbStub\",\"range\":[36,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be GbModel\",\"range\":[45,79]},{\"type\":{\"label\":\")\"},\"range\":[79,80]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be GbModel');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec6._capt(CentralizedAnalysisStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(CentralizedAnalysisStub), 'Argument needs should be CentralizedAnalysisModel')",
    filepath: "tests/class-tests.js",
    line: 150,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"CentralizedAnalysisStub\",\"range\":[36,59]}],\"range\":[7,60]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be CentralizedAnalysisModel\",\"range\":[62,113]}],\"range\":[0,114]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"CentralizedAnalysisStub\",\"range\":[36,59]},{\"type\":{\"label\":\")\"},\"range\":[59,60]},{\"type\":{\"label\":\",\"},\"range\":[60,61]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be CentralizedAnalysisModel\",\"range\":[62,113]},{\"type\":{\"label\":\")\"},\"range\":[113,114]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be CentralizedAnalysisModel');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec7._capt(ThStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(ThStub), 'Argument needs should be ThModel')",
    filepath: "tests/class-tests.js",
    line: 151,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThStub\",\"range\":[36,42]}],\"range\":[7,43]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be ThModel\",\"range\":[45,79]}],\"range\":[0,80]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"ThStub\",\"range\":[36,42]},{\"type\":{\"label\":\")\"},\"range\":[42,43]},{\"type\":{\"label\":\",\"},\"range\":[43,44]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be ThModel\",\"range\":[45,79]},{\"type\":{\"label\":\")\"},\"range\":[79,80]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be ThModel');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec8._capt(SauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(SauStub), 'Argument needs should be SauModel')",
    filepath: "tests/class-tests.js",
    line: 152,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"SauStub\",\"range\":[36,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be SauModel\",\"range\":[46,81]}],\"range\":[0,82]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"SauStub\",\"range\":[36,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be SauModel\",\"range\":[46,81]},{\"type\":{\"label\":\")\"},\"range\":[81,82]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be SauModel');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec9._capt(PdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(PdpStub), 'Argument needs should be PdpModel')",
    filepath: "tests/class-tests.js",
    line: 153,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"PdpStub\",\"range\":[36,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be PdpModel\",\"range\":[46,81]}],\"range\":[0,82]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"PdpStub\",\"range\":[36,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be PdpModel\",\"range\":[46,81]},{\"type\":{\"label\":\")\"},\"range\":[81,82]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be PdpModel');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec10._capt(UthStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(UthStub), 'Argument needs should be UthModel')",
    filepath: "tests/class-tests.js",
    line: 154,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UthStub\",\"range\":[36,43]}],\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be UthModel\",\"range\":[46,81]}],\"range\":[0,82]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"UthStub\",\"range\":[36,43]},{\"type\":{\"label\":\")\"},\"range\":[43,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be UthModel\",\"range\":[46,81]},{\"type\":{\"label\":\")\"},\"range\":[81,82]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be UthModel');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec11._capt(UsauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(UsauStub), 'Argument needs should be UsauModel')",
    filepath: "tests/class-tests.js",
    line: 155,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UsauStub\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be UsauModel\",\"range\":[47,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"UsauStub\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be UsauModel\",\"range\":[47,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be UsauModel');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec12._capt(UpdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(UpdpStub), 'Argument needs should be UpdpModel')",
    filepath: "tests/class-tests.js",
    line: 156,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UpdpStub\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be UpdpModel\",\"range\":[47,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"UpdpStub\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be UpdpModel\",\"range\":[47,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be UpdpModel');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec13._capt(SauUsersStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(SauUsersStub), 'Argument needs should be SauUsersModel')",
    filepath: "tests/class-tests.js",
    line: 157,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"SauUsersStub\",\"range\":[36,48]}],\"range\":[7,49]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be SauUsersModel\",\"range\":[51,91]}],\"range\":[0,92]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"SauUsersStub\",\"range\":[36,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]},{\"type\":{\"label\":\",\"},\"range\":[49,50]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be SauUsersModel\",\"range\":[51,91]},{\"type\":{\"label\":\")\"},\"range\":[91,92]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be SauUsersModel');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec14._capt(PdpSauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(PdpSauStub), 'Argument needs should be PdpSauModel')",
    filepath: "tests/class-tests.js",
    line: 158,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"PdpSauStub\",\"range\":[36,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be PdpSauModel\",\"range\":[49,87]}],\"range\":[0,88]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"PdpSauStub\",\"range\":[36,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be PdpSauModel\",\"range\":[49,87]},{\"type\":{\"label\":\")\"},\"range\":[87,88]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be PdpSauModel');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec15._capt(ThfcPdpStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(ThfcPdpStub), 'Argument needs should be ThfcPdpModel')",
    filepath: "tests/class-tests.js",
    line: 159,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThfcPdpStub\",\"range\":[36,47]}],\"range\":[7,48]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be ThfcPdpModel\",\"range\":[50,89]}],\"range\":[0,90]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"ThfcPdpStub\",\"range\":[36,47]},{\"type\":{\"label\":\")\"},\"range\":[47,48]},{\"type\":{\"label\":\",\"},\"range\":[48,49]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be ThfcPdpModel\",\"range\":[50,89]},{\"type\":{\"label\":\")\"},\"range\":[89,90]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be ThfcPdpModel');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(ClassStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec16._capt(ThfcSauStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.hasMany.calledWith(ThfcSauStub), 'Argument needs should be ThfcSauModel')",
    filepath: "tests/class-tests.js",
    line: 160,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ThfcSauStub\",\"range\":[36,47]}],\"range\":[7,48]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be ThfcSauModel\",\"range\":[50,89]}],\"range\":[0,90]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"ThfcSauStub\",\"range\":[36,47]},{\"type\":{\"label\":\")\"},\"range\":[47,48]},{\"type\":{\"label\":\",\"},\"range\":[48,49]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be ThfcSauModel\",\"range\":[50,89]},{\"type\":{\"label\":\")\"},\"range\":[89,90]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be ThfcSauModel');
});
test.serial('Class#createOrUpdate - exists', async t => {
  var _rec17 = new _powerAssertRecorder(),
      _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder();

  let clase = await db.ClassClase.createOrUpdate(classFixtures.single);
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(ClassStub.findOne.called, 'findOne should be called on model')",
    filepath: "tests/class-tests.js",
    line: 166,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[25,31]},\"computed\":false,\"range\":[7,31]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called on model\",\"range\":[33,68]}],\"range\":[0,69]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[25,31]},{\"type\":{\"label\":\",\"},\"range\":[31,32]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called on model\",\"range\":[33,68]},{\"type\":{\"label\":\")\"},\"range\":[68,69]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called on model');
  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledTwice, 'findOne should be called twice')",
    filepath: "tests/class-tests.js",
    line: 167,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[25,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called twice\",\"range\":[38,70]}],\"range\":[0,71]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[25,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called twice\",\"range\":[38,70]},{\"type\":{\"label\":\")\"},\"range\":[70,71]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called twice');
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(ClassStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec19._capt(condArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with cond Args')",
    filepath: "tests/class-tests.js",
    line: 168,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condArgs\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with cond Args\",\"range\":[47,88]}],\"range\":[0,89]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"condArgs\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with cond Args\",\"range\":[47,88]},{\"type\":{\"label\":\")\"},\"range\":[88,89]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with cond Args');
  t.deepEqual(clase, classFixtures.single, 'should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/bf4b536b330f67f6d7e93e254b82c5a3.js.map