'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const typeFixtures = require('./fixtures/type');

const classFixtures = require('./fixtures/class');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let TypeStub = null;
let ClassStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let RegionStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let DatacenterMainStub = {
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy()
};
let classId = 1;
let condArgs = {
  where: {
    clase: classId
  }
};
let newType = {
  tipo: 9,
  nombre: 'no-existes'
};
let newCondArgs = {
  where: {
    tipo: newType.tipo
  }
};
let newClassId = 3;
let newCondClass = {
  where: {
    clase: newClassId
  }
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  TypeStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy()
  };
  ClassStub = {
    hasMany: sandbox.spy() // Class#Model findOne Stub

  };
  ClassStub.findOne = sandbox.stub();
  ClassStub.findOne.withArgs(condArgs).returns(Promise.resolve(classFixtures.findByClass(classId)));
  ClassStub.findOne.withArgs(newCondClass).returns(Promise.resolve(classFixtures.findByClass(newClassId))); // Type#Model findOne Stub

  TypeStub.findOne = sandbox.stub();
  TypeStub.findOne.withArgs({
    where: {
      tipo: typeFixtures.single.tipo
    }
  }).returns(Promise.resolve(typeFixtures.single)); // Type#Model update Stub

  TypeStub.update = sandbox.stub();
  TypeStub.update.withArgs(typeFixtures.single, condArgs).returns(Promise.resolve(typeFixtures.single)); // Type#Model create Stub

  TypeStub.create = sandbox.stub();
  TypeStub.create.withArgs(newType).returns(Promise.resolve({
    toJSON() {
      return newType;
    }

  })); // Class#Model findAll Stub

  TypeStub.findAll = sandbox.stub();
  TypeStub.findAll.withArgs().returns(Promise.resolve(typeFixtures.findAll));
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Type', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").Type, "arguments/0"), {
    content: "t.truthy(db.Type, 'Type service should exist')",
    filepath: "tests/type-test.js",
    line: 174,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"Type\",\"range\":[12,16]},\"computed\":false,\"range\":[9,16]},{\"type\":\"StringLiteral\",\"value\":\"Type service should exist\",\"range\":[18,45]}],\"range\":[0,46]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"Type\",\"range\":[12,16]},{\"type\":{\"label\":\",\"},\"range\":[16,17]},{\"type\":{\"label\":\"string\"},\"value\":\"Type service should exist\",\"range\":[18,45]},{\"type\":{\"label\":\")\"},\"range\":[45,46]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Type service should exist');
});
test('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder(),
      _rec8 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(TypeStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.hasMany.called, 'TypeModel.hasMany was execute')",
    filepath: "tests/type-test.js",
    line: 178,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"TypeModel.hasMany was execute\",\"range\":[32,63]}],\"range\":[0,64]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"TypeModel.hasMany was execute\",\"range\":[32,63]},{\"type\":{\"label\":\")\"},\"range\":[63,64]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'TypeModel.hasMany was execute');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(TypeStub, "arguments/0/object/object").hasMany, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(TypeStub.hasMany.calledTwice, 'hasMany should be called twice')",
    filepath: "tests/type-test.js",
    line: 179,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[24,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called twice\",\"range\":[37,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[24,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called twice\",\"range\":[37,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called twice');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(TypeStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(UsersStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.hasMany.calledWith(UsersStub), 'Argument needs should be the UsersModel')",
    filepath: "tests/type-test.js",
    line: 180,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"UsersStub\",\"range\":[35,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the UsersModel\",\"range\":[47,88]}],\"range\":[0,89]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"UsersStub\",\"range\":[35,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the UsersModel\",\"range\":[47,88]},{\"type\":{\"label\":\")\"},\"range\":[88,89]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the UsersModel');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(TypeStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec5._capt(TrafficStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.hasMany.calledWith(TrafficStub), 'Argument needs should be the TrafficModel')",
    filepath: "tests/type-test.js",
    line: 181,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"TrafficStub\",\"range\":[35,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the TrafficModel\",\"range\":[49,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"TrafficStub\",\"range\":[35,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the TrafficModel\",\"range\":[49,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the TrafficModel');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(TypeStub, "arguments/0/object/object").belongsTo, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.belongsTo.called, 'TypeModel.belongsTo was executed')",
    filepath: "tests/type-test.js",
    line: 182,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[16,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[26,32]},\"computed\":false,\"range\":[7,32]},{\"type\":\"StringLiteral\",\"value\":\"TypeModel.belongsTo was executed\",\"range\":[34,68]}],\"range\":[0,69]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[16,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[26,32]},{\"type\":{\"label\":\",\"},\"range\":[32,33]},{\"type\":{\"label\":\"string\"},\"value\":\"TypeModel.belongsTo was executed\",\"range\":[34,68]},{\"type\":{\"label\":\")\"},\"range\":[68,69]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'TypeModel.belongsTo was executed');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(TypeStub, "arguments/0/object/object").belongsTo, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(TypeStub.belongsTo.calledOnce, 'belongsTo should be called once')",
    filepath: "tests/type-test.js",
    line: 183,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[16,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"belongsTo should be called once\",\"range\":[38,71]}],\"range\":[0,72]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[16,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[26,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"belongsTo should be called once\",\"range\":[38,71]},{\"type\":{\"label\":\")\"},\"range\":[71,72]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'belongsTo should be called once');
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(TypeStub, "arguments/0/callee/object/object").belongsTo, "arguments/0/callee/object").calledWith(_rec8._capt(ClassStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.belongsTo.calledWith(ClassStub), 'TypeModel.belongsTo should be called with ClassStub args')",
    filepath: "tests/type-test.js",
    line: 184,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[16,25]},\"computed\":false,\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[26,36]},\"computed\":false,\"range\":[7,36]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[37,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"TypeModel.belongsTo should be called with ClassStub args\",\"range\":[49,107]}],\"range\":[0,108]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[16,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[26,36]},{\"type\":{\"label\":\"(\"},\"range\":[36,37]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[37,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"TypeModel.belongsTo should be called with ClassStub args\",\"range\":[49,107]},{\"type\":{\"label\":\")\"},\"range\":[107,108]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'TypeModel.belongsTo should be called with ClassStub args');
});
test.serial('Type#createOrUpdate - exist', async t => {
  var _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder(),
      _rec17 = new _powerAssertRecorder();

  const type = await db.Type.createOrUpdate(typeFixtures.single, classId);
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')",
    filepath: "tests/type-test.js",
    line: 190,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[25,31]},\"computed\":false,\"range\":[7,31]},{\"type\":\"StringLiteral\",\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[25,31]},{\"type\":{\"label\":\",\"},\"range\":[31,32]},{\"type\":{\"label\":\"string\"},\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'ClassModel.findOne was execute');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')",
    filepath: "tests/type-test.js",
    line: 191,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\" findOne should be called once\",\"range\":[37,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[25,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\" findOne should be called once\",\"range\":[37,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), ' findOne should be called once');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(ClassStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec11._capt(condArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')",
    filepath: "tests/type-test.js",
    line: 192,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condArgs\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condArgs args\",\"range\":[47,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"condArgs\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condArgs args\",\"range\":[47,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condArgs args');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(TypeStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.findOne.called, 'TypeModel.findOne was execute')",
    filepath: "tests/type-test.js",
    line: 193,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"TypeModel.findOne was execute\",\"range\":[32,63]}],\"range\":[0,64]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"TypeModel.findOne was execute\",\"range\":[32,63]},{\"type\":{\"label\":\")\"},\"range\":[63,64]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'TypeModel.findOne was execute');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(TypeStub, "arguments/0/object/object").findOne, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(TypeStub.findOne.calledTwice, 'findOne should be called once')",
    filepath: "tests/type-test.js",
    line: 194,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[24,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called once\",\"range\":[37,68]}],\"range\":[0,69]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[24,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called once\",\"range\":[37,68]},{\"type\":{\"label\":\")\"},\"range\":[68,69]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(TypeStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec14._capt({
    where: _rec14._capt({
      tipo: _rec14._capt(_rec14._capt(_rec14._capt(typeFixtures, "arguments/0/arguments/0/properties/0/value/properties/0/value/object/object").single, "arguments/0/arguments/0/properties/0/value/properties/0/value/object").tipo, "arguments/0/arguments/0/properties/0/value/properties/0/value")
    }, "arguments/0/arguments/0/properties/0/value")
  }, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.findOne.calledWith({ where: { tipo: typeFixtures.single.tipo } }), 'findOne should be called with tipo Args')",
    filepath: "tests/type-test.js",
    line: 195,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"where\",\"range\":[37,42]},\"value\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"tipo\",\"range\":[46,50]},\"value\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"typeFixtures\",\"range\":[52,64]},\"property\":{\"type\":\"Identifier\",\"name\":\"single\",\"range\":[65,71]},\"computed\":false,\"range\":[52,71]},\"property\":{\"type\":\"Identifier\",\"name\":\"tipo\",\"range\":[72,76]},\"computed\":false,\"range\":[52,76]},\"computed\":false,\"shorthand\":false,\"range\":[46,76]}],\"range\":[44,78]},\"computed\":false,\"shorthand\":false,\"range\":[37,78]}],\"range\":[35,80]}],\"range\":[7,81]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with tipo Args\",\"range\":[83,124]}],\"range\":[0,125]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"{\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"where\",\"range\":[37,42]},{\"type\":{\"label\":\":\"},\"range\":[42,43]},{\"type\":{\"label\":\"{\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"tipo\",\"range\":[46,50]},{\"type\":{\"label\":\":\"},\"range\":[50,51]},{\"type\":{\"label\":\"name\"},\"value\":\"typeFixtures\",\"range\":[52,64]},{\"type\":{\"label\":\".\"},\"range\":[64,65]},{\"type\":{\"label\":\"name\"},\"value\":\"single\",\"range\":[65,71]},{\"type\":{\"label\":\".\"},\"range\":[71,72]},{\"type\":{\"label\":\"name\"},\"value\":\"tipo\",\"range\":[72,76]},{\"type\":{\"label\":\"}\"},\"range\":[77,78]},{\"type\":{\"label\":\"}\"},\"range\":[79,80]},{\"type\":{\"label\":\")\"},\"range\":[80,81]},{\"type\":{\"label\":\",\"},\"range\":[81,82]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with tipo Args\",\"range\":[83,124]},{\"type\":{\"label\":\")\"},\"range\":[124,125]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with tipo Args');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(TypeStub, "arguments/0/object/object").update, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.update.called, 'update should be called')",
    filepath: "tests/type-test.js",
    line: 196,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[23,29]},\"computed\":false,\"range\":[7,29]},{\"type\":\"StringLiteral\",\"value\":\"update should be called\",\"range\":[31,56]}],\"range\":[0,57]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called\",\"range\":[31,56]},{\"type\":{\"label\":\")\"},\"range\":[56,57]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(TypeStub, "arguments/0/object/object").update, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(TypeStub.update.calledOnce, 'update should be called once')",
    filepath: "tests/type-test.js",
    line: 197,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},{\"type\":\"StringLiteral\",\"value\":\"update should be called once\",\"range\":[35,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[23,33]},{\"type\":{\"label\":\",\"},\"range\":[33,34]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called once\",\"range\":[35,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called once');
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(TypeStub, "arguments/0/callee/object/object").update, "arguments/0/callee/object").calledWith(_rec17._capt(_rec17._capt(typeFixtures, "arguments/0/arguments/0/object").single, "arguments/0/arguments/0"), _rec17._capt({
    where: _rec17._capt({
      tipo: _rec17._capt(_rec17._capt(_rec17._capt(typeFixtures, "arguments/0/arguments/1/properties/0/value/properties/0/value/object/object").single, "arguments/0/arguments/1/properties/0/value/properties/0/value/object").tipo, "arguments/0/arguments/1/properties/0/value/properties/0/value")
    }, "arguments/0/arguments/1/properties/0/value")
  }, "arguments/0/arguments/1")), "arguments/0"), {
    content: "t.true(TypeStub.update.calledWith(typeFixtures.single, { where: { tipo: typeFixtures.single.tipo } }), 'update should be called with single, cond Args')",
    filepath: "tests/type-test.js",
    line: 198,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"typeFixtures\",\"range\":[34,46]},\"property\":{\"type\":\"Identifier\",\"name\":\"single\",\"range\":[47,53]},\"computed\":false,\"range\":[34,53]},{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"where\",\"range\":[57,62]},\"value\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"tipo\",\"range\":[66,70]},\"value\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"typeFixtures\",\"range\":[72,84]},\"property\":{\"type\":\"Identifier\",\"name\":\"single\",\"range\":[85,91]},\"computed\":false,\"range\":[72,91]},\"property\":{\"type\":\"Identifier\",\"name\":\"tipo\",\"range\":[92,96]},\"computed\":false,\"range\":[72,96]},\"computed\":false,\"shorthand\":false,\"range\":[66,96]}],\"range\":[64,98]},\"computed\":false,\"shorthand\":false,\"range\":[57,98]}],\"range\":[55,100]}],\"range\":[7,101]},{\"type\":\"StringLiteral\",\"value\":\"update should be called with single, cond Args\",\"range\":[103,151]}],\"range\":[0,152]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[23,33]},{\"type\":{\"label\":\"(\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"typeFixtures\",\"range\":[34,46]},{\"type\":{\"label\":\".\"},\"range\":[46,47]},{\"type\":{\"label\":\"name\"},\"value\":\"single\",\"range\":[47,53]},{\"type\":{\"label\":\",\"},\"range\":[53,54]},{\"type\":{\"label\":\"{\"},\"range\":[55,56]},{\"type\":{\"label\":\"name\"},\"value\":\"where\",\"range\":[57,62]},{\"type\":{\"label\":\":\"},\"range\":[62,63]},{\"type\":{\"label\":\"{\"},\"range\":[64,65]},{\"type\":{\"label\":\"name\"},\"value\":\"tipo\",\"range\":[66,70]},{\"type\":{\"label\":\":\"},\"range\":[70,71]},{\"type\":{\"label\":\"name\"},\"value\":\"typeFixtures\",\"range\":[72,84]},{\"type\":{\"label\":\".\"},\"range\":[84,85]},{\"type\":{\"label\":\"name\"},\"value\":\"single\",\"range\":[85,91]},{\"type\":{\"label\":\".\"},\"range\":[91,92]},{\"type\":{\"label\":\"name\"},\"value\":\"tipo\",\"range\":[92,96]},{\"type\":{\"label\":\"}\"},\"range\":[97,98]},{\"type\":{\"label\":\"}\"},\"range\":[99,100]},{\"type\":{\"label\":\")\"},\"range\":[100,101]},{\"type\":{\"label\":\",\"},\"range\":[101,102]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called with single, cond Args\",\"range\":[103,151]},{\"type\":{\"label\":\")\"},\"range\":[151,152]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called with single, cond Args');
  t.deepEqual(type, typeFixtures.single, 'should be the same');
});
test.serial('Type#createOrUpdate - new', async t => {
  var _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder(),
      _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder(),
      _rec24 = new _powerAssertRecorder(),
      _rec25 = new _powerAssertRecorder(),
      _rec26 = new _powerAssertRecorder();

  const type = await db.Type.createOrUpdate(newType, classId);
  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')",
    filepath: "tests/type-test.js",
    line: 206,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[25,31]},\"computed\":false,\"range\":[7,31]},{\"type\":\"StringLiteral\",\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[25,31]},{\"type\":{\"label\":\",\"},\"range\":[31,32]},{\"type\":{\"label\":\"string\"},\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'ClassModel.findOne was execute');
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')",
    filepath: "tests/type-test.js",
    line: 207,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\" findOne should be called once\",\"range\":[37,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[25,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\" findOne should be called once\",\"range\":[37,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), ' findOne should be called once');
  t.true(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(ClassStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec20._capt(condArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with condArgs args')",
    filepath: "tests/type-test.js",
    line: 208,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condArgs\",\"range\":[36,44]}],\"range\":[7,45]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condArgs args\",\"range\":[47,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"condArgs\",\"range\":[36,44]},{\"type\":{\"label\":\")\"},\"range\":[44,45]},{\"type\":{\"label\":\",\"},\"range\":[45,46]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condArgs args\",\"range\":[47,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condArgs args');
  t.true(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(TypeStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.findOne.called, 'findOne should be called')",
    filepath: "tests/type-test.js",
    line: 209,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called\",\"range\":[32,58]}],\"range\":[0,59]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called\",\"range\":[32,58]},{\"type\":{\"label\":\")\"},\"range\":[58,59]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called');
  t.true(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(TypeStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(TypeStub.findOne.calledOnce, 'findOne should be called once')",
    filepath: "tests/type-test.js",
    line: 210,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called once\",\"range\":[36,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[24,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called once\",\"range\":[36,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called once');
  t.true(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(TypeStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec23._capt(newCondArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.findOne.calledWith(newCondArgs), 'findOne should be called with newCond Args')",
    filepath: "tests/type-test.js",
    line: 211,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newCondArgs\",\"range\":[35,46]}],\"range\":[7,47]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with newCond Args\",\"range\":[49,93]}],\"range\":[0,94]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\"name\"},\"value\":\"newCondArgs\",\"range\":[35,46]},{\"type\":{\"label\":\")\"},\"range\":[46,47]},{\"type\":{\"label\":\",\"},\"range\":[47,48]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with newCond Args\",\"range\":[49,93]},{\"type\":{\"label\":\")\"},\"range\":[93,94]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with newCond Args');
  t.true(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(TypeStub, "arguments/0/object/object").create, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.create.called, 'create should be called')",
    filepath: "tests/type-test.js",
    line: 212,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[23,29]},\"computed\":false,\"range\":[7,29]},{\"type\":\"StringLiteral\",\"value\":\"create should be called\",\"range\":[31,56]}],\"range\":[0,57]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[23,29]},{\"type\":{\"label\":\",\"},\"range\":[29,30]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called\",\"range\":[31,56]},{\"type\":{\"label\":\")\"},\"range\":[56,57]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called');
  t.true(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(TypeStub, "arguments/0/object/object").create, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(TypeStub.create.calledOnce, 'create should be called once')",
    filepath: "tests/type-test.js",
    line: 213,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},{\"type\":\"StringLiteral\",\"value\":\"create should be called once\",\"range\":[35,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[23,33]},{\"type\":{\"label\":\",\"},\"range\":[33,34]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called once\",\"range\":[35,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once');
  t.true(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(TypeStub, "arguments/0/callee/object/object").create, "arguments/0/callee/object").calledWith(_rec26._capt(newType, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(TypeStub.create.calledWith(newType), 'create should be called with newClass args')",
    filepath: "tests/type-test.js",
    line: 214,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[16,22]},\"computed\":false,\"range\":[7,22]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[23,33]},\"computed\":false,\"range\":[7,33]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newType\",\"range\":[34,41]}],\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"create should be called with newClass args\",\"range\":[44,88]}],\"range\":[0,89]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[16,22]},{\"type\":{\"label\":\".\"},\"range\":[22,23]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[23,33]},{\"type\":{\"label\":\"(\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"newType\",\"range\":[34,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called with newClass args\",\"range\":[44,88]},{\"type\":{\"label\":\")\"},\"range\":[88,89]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with newClass args');
  t.deepEqual(type, newType, 'should be the same');
});
test.serial('Type#createOrUpdate - class no exist', async t => {
  var _rec27 = new _powerAssertRecorder(),
      _rec28 = new _powerAssertRecorder(),
      _rec29 = new _powerAssertRecorder();

  const type = await db.Type.createOrUpdate(newType, newClassId);
  t.true(_rec27._expr(_rec27._capt(_rec27._capt(_rec27._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(ClassStub.findOne.called, 'ClassModel.findOne was execute')",
    filepath: "tests/type-test.js",
    line: 222,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[25,31]},\"computed\":false,\"range\":[7,31]},{\"type\":\"StringLiteral\",\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]}],\"range\":[0,66]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[25,31]},{\"type\":{\"label\":\",\"},\"range\":[31,32]},{\"type\":{\"label\":\"string\"},\"value\":\"ClassModel.findOne was execute\",\"range\":[33,65]},{\"type\":{\"label\":\")\"},\"range\":[65,66]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'ClassModel.findOne was execute');
  t.true(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(ClassStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledOnce, ' findOne should be called once')",
    filepath: "tests/type-test.js",
    line: 223,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\" findOne should be called once\",\"range\":[37,69]}],\"range\":[0,70]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[25,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\" findOne should be called once\",\"range\":[37,69]},{\"type\":{\"label\":\")\"},\"range\":[69,70]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), ' findOne should be called once');
  t.true(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(ClassStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec29._capt(newCondClass, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(ClassStub.findOne.calledWith(newCondClass), 'findOne should be called with condArgs args')",
    filepath: "tests/type-test.js",
    line: 224,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"ClassStub\",\"range\":[7,16]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[17,24]},\"computed\":false,\"range\":[7,24]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[25,35]},\"computed\":false,\"range\":[7,35]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newCondClass\",\"range\":[36,48]}],\"range\":[7,49]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condArgs args\",\"range\":[51,96]}],\"range\":[0,97]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"ClassStub\",\"range\":[7,16]},{\"type\":{\"label\":\".\"},\"range\":[16,17]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[17,24]},{\"type\":{\"label\":\".\"},\"range\":[24,25]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[25,35]},{\"type\":{\"label\":\"(\"},\"range\":[35,36]},{\"type\":{\"label\":\"name\"},\"value\":\"newCondClass\",\"range\":[36,48]},{\"type\":{\"label\":\")\"},\"range\":[48,49]},{\"type\":{\"label\":\",\"},\"range\":[49,50]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condArgs args\",\"range\":[51,96]},{\"type\":{\"label\":\")\"},\"range\":[96,97]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condArgs args');
  t.deepEqual(type, classFixtures.findByClass(newClassId), 'should be the same');
});
test.serial('Type#findAll', async t => {
  var _rec30 = new _powerAssertRecorder(),
      _rec31 = new _powerAssertRecorder(),
      _rec32 = new _powerAssertRecorder();

  let types = await db.Type.findAll();
  t.true(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(TypeStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(TypeStub.findAll.called, 'findAll should be called')",
    filepath: "tests/type-test.js",
    line: 232,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[24,30]},\"computed\":false,\"range\":[7,30]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called\",\"range\":[32,58]}],\"range\":[0,59]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[24,30]},{\"type\":{\"label\":\",\"},\"range\":[30,31]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called\",\"range\":[32,58]},{\"type\":{\"label\":\")\"},\"range\":[58,59]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called');
  t.true(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(TypeStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(TypeStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/type-test.js",
    line: 233,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[36,67]}],\"range\":[0,68]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[24,34]},{\"type\":{\"label\":\",\"},\"range\":[34,35]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[36,67]},{\"type\":{\"label\":\")\"},\"range\":[67,68]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(TypeStub, "arguments/0/callee/object/object").findAll, "arguments/0/callee/object").calledWith(), "arguments/0"), {
    content: "t.true(TypeStub.findAll.calledWith(), 'findAll should be called without any args')",
    filepath: "tests/type-test.js",
    line: 234,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"TypeStub\",\"range\":[7,15]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[16,23]},\"computed\":false,\"range\":[7,23]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[24,34]},\"computed\":false,\"range\":[7,34]},\"arguments\":[],\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called without any args\",\"range\":[38,81]}],\"range\":[0,82]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"TypeStub\",\"range\":[7,15]},{\"type\":{\"label\":\".\"},\"range\":[15,16]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[16,23]},{\"type\":{\"label\":\".\"},\"range\":[23,24]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[24,34]},{\"type\":{\"label\":\"(\"},\"range\":[34,35]},{\"type\":{\"label\":\")\"},\"range\":[35,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called without any args\",\"range\":[38,81]},{\"type\":{\"label\":\")\"},\"range\":[81,82]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called without any args');
  t.deepEqual(types, typeFixtures.findAll, 'Classes should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/55a420e85b7684e8f22f5e15908e3834.js.map