'use strict';

var _powerAssertVisitorKeys = "{\"ArrayExpression\":[\"elements\"],\"AssignmentExpression\":[\"left\",\"right\"],\"BinaryExpression\":[\"left\",\"right\"],\"InterpreterDirective\":[],\"Directive\":[\"value\"],\"DirectiveLiteral\":[],\"BlockStatement\":[\"directives\",\"body\"],\"BreakStatement\":[\"label\"],\"CallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"CatchClause\":[\"param\",\"body\"],\"ConditionalExpression\":[\"test\",\"consequent\",\"alternate\"],\"ContinueStatement\":[\"label\"],\"DebuggerStatement\":[],\"DoWhileStatement\":[\"test\",\"body\"],\"EmptyStatement\":[],\"ExpressionStatement\":[\"expression\"],\"File\":[\"program\"],\"ForInStatement\":[\"left\",\"right\",\"body\"],\"ForStatement\":[\"init\",\"test\",\"update\",\"body\"],\"FunctionDeclaration\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"FunctionExpression\":[\"id\",\"params\",\"body\",\"returnType\",\"typeParameters\"],\"Identifier\":[\"typeAnnotation\"],\"IfStatement\":[\"test\",\"consequent\",\"alternate\"],\"LabeledStatement\":[\"label\",\"body\"],\"StringLiteral\":[],\"NumericLiteral\":[],\"NullLiteral\":[],\"BooleanLiteral\":[],\"RegExpLiteral\":[],\"LogicalExpression\":[\"left\",\"right\"],\"MemberExpression\":[\"object\",\"property\"],\"NewExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"Program\":[\"directives\",\"body\"],\"ObjectExpression\":[\"properties\"],\"ObjectMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectProperty\":[\"key\",\"value\",\"decorators\"],\"RestElement\":[\"argument\",\"typeAnnotation\"],\"ReturnStatement\":[\"argument\"],\"SequenceExpression\":[\"expressions\"],\"SwitchCase\":[\"test\",\"consequent\"],\"SwitchStatement\":[\"discriminant\",\"cases\"],\"ThisExpression\":[],\"ThrowStatement\":[\"argument\"],\"TryStatement\":[\"block\",\"handler\",\"finalizer\"],\"UnaryExpression\":[\"argument\"],\"UpdateExpression\":[\"argument\"],\"VariableDeclaration\":[\"declarations\"],\"VariableDeclarator\":[\"id\",\"init\"],\"WhileStatement\":[\"test\",\"body\"],\"WithStatement\":[\"object\",\"body\"],\"AssignmentPattern\":[\"left\",\"right\"],\"ArrayPattern\":[\"elements\",\"typeAnnotation\"],\"ArrowFunctionExpression\":[\"params\",\"body\",\"returnType\",\"typeParameters\"],\"ClassBody\":[\"body\"],\"ClassDeclaration\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ClassExpression\":[\"id\",\"body\",\"superClass\",\"mixins\",\"typeParameters\",\"superTypeParameters\",\"implements\",\"decorators\"],\"ExportAllDeclaration\":[\"source\"],\"ExportDefaultDeclaration\":[\"declaration\"],\"ExportNamedDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"ExportSpecifier\":[\"local\",\"exported\"],\"ForOfStatement\":[\"left\",\"right\",\"body\"],\"ImportDeclaration\":[\"specifiers\",\"source\"],\"ImportDefaultSpecifier\":[\"local\"],\"ImportNamespaceSpecifier\":[\"local\"],\"ImportSpecifier\":[\"local\",\"imported\"],\"MetaProperty\":[\"meta\",\"property\"],\"ClassMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"ObjectPattern\":[\"properties\",\"typeAnnotation\"],\"SpreadElement\":[\"argument\"],\"Super\":[],\"TaggedTemplateExpression\":[\"tag\",\"quasi\"],\"TemplateElement\":[],\"TemplateLiteral\":[\"quasis\",\"expressions\"],\"YieldExpression\":[\"argument\"],\"AnyTypeAnnotation\":[],\"ArrayTypeAnnotation\":[\"elementType\"],\"BooleanTypeAnnotation\":[],\"BooleanLiteralTypeAnnotation\":[],\"NullLiteralTypeAnnotation\":[],\"ClassImplements\":[\"id\",\"typeParameters\"],\"DeclareClass\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareFunction\":[\"id\"],\"DeclareInterface\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"DeclareModule\":[\"id\",\"body\"],\"DeclareModuleExports\":[\"typeAnnotation\"],\"DeclareTypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"DeclareOpaqueType\":[\"id\",\"typeParameters\",\"supertype\"],\"DeclareVariable\":[\"id\"],\"DeclareExportDeclaration\":[\"declaration\",\"specifiers\",\"source\"],\"DeclareExportAllDeclaration\":[\"source\"],\"DeclaredPredicate\":[\"value\"],\"ExistsTypeAnnotation\":[],\"FunctionTypeAnnotation\":[\"typeParameters\",\"params\",\"rest\",\"returnType\"],\"FunctionTypeParam\":[\"name\",\"typeAnnotation\"],\"GenericTypeAnnotation\":[\"id\",\"typeParameters\"],\"InferredPredicate\":[],\"InterfaceExtends\":[\"id\",\"typeParameters\"],\"InterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"mixins\",\"implements\",\"body\"],\"InterfaceTypeAnnotation\":[\"extends\",\"body\"],\"IntersectionTypeAnnotation\":[\"types\"],\"MixedTypeAnnotation\":[],\"EmptyTypeAnnotation\":[],\"NullableTypeAnnotation\":[\"typeAnnotation\"],\"NumberLiteralTypeAnnotation\":[],\"NumberTypeAnnotation\":[],\"ObjectTypeAnnotation\":[\"properties\",\"indexers\",\"callProperties\",\"internalSlots\"],\"ObjectTypeInternalSlot\":[\"id\",\"value\",\"optional\",\"static\",\"method\"],\"ObjectTypeCallProperty\":[\"value\"],\"ObjectTypeIndexer\":[\"id\",\"key\",\"value\",\"variance\"],\"ObjectTypeProperty\":[\"key\",\"value\",\"variance\"],\"ObjectTypeSpreadProperty\":[\"argument\"],\"OpaqueType\":[\"id\",\"typeParameters\",\"supertype\",\"impltype\"],\"QualifiedTypeIdentifier\":[\"id\",\"qualification\"],\"StringLiteralTypeAnnotation\":[],\"StringTypeAnnotation\":[],\"ThisTypeAnnotation\":[],\"TupleTypeAnnotation\":[\"types\"],\"TypeofTypeAnnotation\":[\"argument\"],\"TypeAlias\":[\"id\",\"typeParameters\",\"right\"],\"TypeAnnotation\":[\"typeAnnotation\"],\"TypeCastExpression\":[\"expression\",\"typeAnnotation\"],\"TypeParameter\":[\"bound\",\"default\",\"variance\"],\"TypeParameterDeclaration\":[\"params\"],\"TypeParameterInstantiation\":[\"params\"],\"UnionTypeAnnotation\":[\"types\"],\"Variance\":[],\"VoidTypeAnnotation\":[],\"JSXAttribute\":[\"name\",\"value\"],\"JSXClosingElement\":[\"name\"],\"JSXElement\":[\"openingElement\",\"children\",\"closingElement\"],\"JSXEmptyExpression\":[],\"JSXExpressionContainer\":[\"expression\"],\"JSXSpreadChild\":[\"expression\"],\"JSXIdentifier\":[],\"JSXMemberExpression\":[\"object\",\"property\"],\"JSXNamespacedName\":[\"namespace\",\"name\"],\"JSXOpeningElement\":[\"name\",\"attributes\"],\"JSXSpreadAttribute\":[\"argument\"],\"JSXText\":[],\"JSXFragment\":[\"openingFragment\",\"children\",\"closingFragment\"],\"JSXOpeningFragment\":[],\"JSXClosingFragment\":[],\"Noop\":[],\"ParenthesizedExpression\":[\"expression\"],\"AwaitExpression\":[\"argument\"],\"BindExpression\":[\"object\",\"callee\"],\"ClassProperty\":[\"key\",\"value\",\"typeAnnotation\",\"decorators\"],\"OptionalMemberExpression\":[\"object\",\"property\"],\"PipelineTopicExpression\":[\"expression\"],\"PipelineBareFunction\":[\"callee\"],\"PipelinePrimaryTopicReference\":[],\"OptionalCallExpression\":[\"callee\",\"arguments\",\"typeParameters\",\"typeArguments\"],\"ClassPrivateProperty\":[\"key\",\"value\"],\"ClassPrivateMethod\":[\"key\",\"params\",\"body\",\"decorators\",\"returnType\",\"typeParameters\"],\"Import\":[],\"Decorator\":[\"expression\"],\"DoExpression\":[\"body\"],\"ExportDefaultSpecifier\":[\"exported\"],\"ExportNamespaceSpecifier\":[\"exported\"],\"PrivateName\":[\"id\"],\"BigIntLiteral\":[],\"TSParameterProperty\":[\"parameter\"],\"TSDeclareFunction\":[\"id\",\"typeParameters\",\"params\",\"returnType\"],\"TSDeclareMethod\":[\"decorators\",\"key\",\"typeParameters\",\"params\",\"returnType\"],\"TSQualifiedName\":[\"left\",\"right\"],\"TSCallSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSConstructSignatureDeclaration\":[\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSPropertySignature\":[\"key\",\"typeAnnotation\",\"initializer\"],\"TSMethodSignature\":[\"key\",\"typeParameters\",\"parameters\",\"typeAnnotation\"],\"TSIndexSignature\":[\"parameters\",\"typeAnnotation\"],\"TSAnyKeyword\":[],\"TSUnknownKeyword\":[],\"TSNumberKeyword\":[],\"TSObjectKeyword\":[],\"TSBooleanKeyword\":[],\"TSStringKeyword\":[],\"TSSymbolKeyword\":[],\"TSVoidKeyword\":[],\"TSUndefinedKeyword\":[],\"TSNullKeyword\":[],\"TSNeverKeyword\":[],\"TSThisType\":[],\"TSFunctionType\":[\"typeParameters\",\"typeAnnotation\"],\"TSConstructorType\":[\"typeParameters\",\"typeAnnotation\"],\"TSTypeReference\":[\"typeName\",\"typeParameters\"],\"TSTypePredicate\":[\"parameterName\",\"typeAnnotation\"],\"TSTypeQuery\":[\"exprName\"],\"TSTypeLiteral\":[\"members\"],\"TSArrayType\":[\"elementType\"],\"TSTupleType\":[\"elementTypes\"],\"TSOptionalType\":[\"typeAnnotation\"],\"TSRestType\":[\"typeAnnotation\"],\"TSUnionType\":[\"types\"],\"TSIntersectionType\":[\"types\"],\"TSConditionalType\":[\"checkType\",\"extendsType\",\"trueType\",\"falseType\"],\"TSInferType\":[\"typeParameter\"],\"TSParenthesizedType\":[\"typeAnnotation\"],\"TSTypeOperator\":[\"typeAnnotation\"],\"TSIndexedAccessType\":[\"objectType\",\"indexType\"],\"TSMappedType\":[\"typeParameter\",\"typeAnnotation\"],\"TSLiteralType\":[\"literal\"],\"TSExpressionWithTypeArguments\":[\"expression\",\"typeParameters\"],\"TSInterfaceDeclaration\":[\"id\",\"typeParameters\",\"extends\",\"body\"],\"TSInterfaceBody\":[\"body\"],\"TSTypeAliasDeclaration\":[\"id\",\"typeParameters\",\"typeAnnotation\"],\"TSAsExpression\":[\"expression\",\"typeAnnotation\"],\"TSTypeAssertion\":[\"typeAnnotation\",\"expression\"],\"TSEnumDeclaration\":[\"id\",\"members\"],\"TSEnumMember\":[\"id\",\"initializer\"],\"TSModuleDeclaration\":[\"id\",\"body\"],\"TSModuleBlock\":[\"body\"],\"TSImportType\":[\"argument\",\"qualifier\",\"typeParameters\"],\"TSImportEqualsDeclaration\":[\"id\",\"moduleReference\"],\"TSExternalModuleReference\":[\"expression\"],\"TSNonNullExpression\":[\"expression\"],\"TSExportAssignment\":[\"expression\"],\"TSNamespaceExportDeclaration\":[\"id\"],\"TSTypeAnnotation\":[\"typeAnnotation\"],\"TSTypeParameterInstantiation\":[\"params\"],\"TSTypeParameterDeclaration\":[\"params\"],\"TSTypeParameter\":[\"constraint\",\"default\"]}",
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const datacenterFixtures = require('./fixtures/datacenter');

const datacenterMainFixtures = require('./fixtures/datacenterMain');

let config = {
  logging: function () {}
};
let db = null;
let sandbox = null;
let DatacenterMainStub = null;
let DatacenterStub = null; // general

let DateStub = {
  hasMany: sinon.spy()
};
let TypeStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let ClassStub = {
  hasMany: sinon.spy()
};
let RegionStub = {
  belongsTo: sinon.spy(),
  hasMany: sinon.spy()
};
let UsersStub = {
  belongsTo: sinon.spy()
};
let TrafficStub = {
  belongsTo: sinon.spy()
};
let GbStub = {
  belongsTo: sinon.spy()
};
let CentralizedAnalysisStub = {
  belongsTo: sinon.spy() // core-ps

};
let PdpStub = {
  belongsTo: sinon.spy()
};
let SauStub = {
  belongsTo: sinon.spy()
};
let ThStub = {
  belongsTo: sinon.spy() // u2000

};
let UthStub = {
  belongsTo: sinon.spy()
};
let UpdpStub = {
  belongsTo: sinon.spy()
};
let UsauStub = {
  belongsTo: sinon.spy() // ratios

};
let PdpSauStub = {
  belongsTo: sinon.spy()
};
let SauUsersStub = {
  belongsTo: sinon.spy()
};
let ThfcSauStub = {
  belongsTo: sinon.spy()
};
let ThfcPdpStub = {
  belongsTo: sinon.spy()
};
let datacenterMainId = 1;
let condMainArgs = {
  where: {
    dc_principal: datacenterMainId
  }
};
let newDatacenterMainId = 5;
let condNewDatacenterMain = {
  where: {
    dc_principal: newDatacenterMainId
  }
};
let datacenterId = datacenterFixtures.single.datacenter;
let condDatacenterArgs = {
  where: {
    datacenter: datacenterId
  }
};
let newDatacenter = {
  id: 8,
  nombre: 'lalolalocura',
  dc_principalId: datacenterMainId
};
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  DatacenterStub = {
    hasMany: sandbox.spy(),
    belongsTo: sandbox.spy()
  };
  DatacenterMainStub = {
    hasMany: sandbox.spy() // Class#Model findOne Stub

  };
  DatacenterMainStub.findOne = sandbox.stub();
  DatacenterMainStub.findOne.withArgs(condMainArgs).returns(Promise.resolve(datacenterMainFixtures.single));
  DatacenterMainStub.findOne.withArgs(condNewDatacenterMain).returns(Promise.resolve(datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId))); // Type#Model findOne Stub

  DatacenterStub.findOne = sandbox.stub();
  DatacenterStub.findOne.withArgs(condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single)); // Type#Model update Stub

  DatacenterStub.update = sandbox.stub();
  DatacenterStub.update.withArgs(datacenterFixtures.single, condDatacenterArgs).returns(Promise.resolve(datacenterFixtures.single)); // Type#Model create Stub

  DatacenterStub.create = sandbox.stub();
  DatacenterStub.create.withArgs(newDatacenter).returns(Promise.resolve({
    toJSON() {
      return newDatacenter;
    }

  })); // Class#Model findAll Stub

  DatacenterStub.findAll = sandbox.stub();
  DatacenterStub.findAll.withArgs().returns(Promise.resolve(datacenterFixtures.findAll));
  DatacenterStub.findAll.withArgs({
    attributes: ['datacenter', 'nombre'],
    group: ['datacenter'],
    include: [{
      attributes: [],
      model: DatacenterMainStub,
      where: {
        dc_principal: datacenterMainId
      }
    }],
    raw: true
  }).returns(Promise.resolve(datacenterFixtures.findByDatacenterMainId(datacenterMainId)));
  const setupDatabase = proxyquire('../', {
    './models/general/users': () => UsersStub,
    './models/general/traffic': () => TrafficStub,
    './models/general/gb': () => GbStub,
    './models/general/centralized_analysis': () => CentralizedAnalysisStub,
    './models/general/date': () => DateStub,
    './models/general/type': () => TypeStub,
    './models/general/class': () => ClassStub,
    './models/general/region': () => RegionStub,
    './models/general/datacenter': () => DatacenterStub,
    './models/general/datacenter_main': () => DatacenterMainStub,
    './models/core-ps/pdp': () => PdpStub,
    './models/core-ps/sau': () => SauStub,
    './models/core-ps/th': () => ThStub,
    './models/u2000/th': () => UthStub,
    './models/u2000/pdp': () => UpdpStub,
    './models/u2000/sau': () => UsauStub,
    './models/ratios/pdp_ sau': () => PdpSauStub,
    './models/ratios/sau_users': () => SauUsersStub,
    './models/ratios/thfc_sau': () => ThfcSauStub,
    './models/ratios/thfc_pdp': () => ThfcPdpStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sandbox.restore();
});
test('Datacenter', t => {
  var _rec = new _powerAssertRecorder();

  t.truthy(_rec._expr(_rec._capt(_rec._capt(db, "arguments/0/object").Datacenter, "arguments/0"), {
    content: "t.truthy(db.Datacenter, 'Datacenter service should exist')",
    filepath: "tests/datacenter-tests.js",
    line: 187,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"truthy\",\"range\":[2,8]},\"computed\":false,\"range\":[0,8]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"db\",\"range\":[9,11]},\"property\":{\"type\":\"Identifier\",\"name\":\"Datacenter\",\"range\":[12,22]},\"computed\":false,\"range\":[9,22]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter service should exist\",\"range\":[24,57]}],\"range\":[0,58]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"name\"},\"value\":\"truthy\",\"range\":[2,8]},{\"type\":{\"label\":\"(\"},\"range\":[8,9]},{\"type\":{\"label\":\"name\"},\"value\":\"db\",\"range\":[9,11]},{\"type\":{\"label\":\".\"},\"range\":[11,12]},{\"type\":{\"label\":\"name\"},\"value\":\"Datacenter\",\"range\":[12,22]},{\"type\":{\"label\":\",\"},\"range\":[22,23]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter service should exist\",\"range\":[24,57]},{\"type\":{\"label\":\")\"},\"range\":[57,58]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter service should exist');
});
test('Setup', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder(),
      _rec5 = new _powerAssertRecorder(),
      _rec6 = new _powerAssertRecorder(),
      _rec7 = new _powerAssertRecorder();

  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(DatacenterStub, "arguments/0/object/object").hasMany, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.hasMany.called, 'DatacenterModel.hasMany was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 191,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[30,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterModel.hasMany was execute\",\"range\":[38,75]}],\"range\":[0,76]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[30,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterModel.hasMany was execute\",\"range\":[38,75]},{\"type\":{\"label\":\")\"},\"range\":[75,76]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterModel.hasMany was execute');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(DatacenterStub, "arguments/0/object/object").hasMany, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.hasMany.calledOnce, 'hasMany should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 192,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"hasMany should be called once\",\"range\":[42,73]}],\"range\":[0,74]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[30,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"hasMany should be called once\",\"range\":[42,73]},{\"type\":{\"label\":\")\"},\"range\":[73,74]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'hasMany should be called once');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(DatacenterStub, "arguments/0/callee/object/object").hasMany, "arguments/0/callee/object").calledWith(_rec4._capt(RegionStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterStub.hasMany.calledWith(RegionStub), 'Argument needs should be the RegionModel args')",
    filepath: "tests/datacenter-tests.js",
    line: 193,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"hasMany\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"RegionStub\",\"range\":[41,51]}],\"range\":[7,52]},{\"type\":\"StringLiteral\",\"value\":\"Argument needs should be the RegionModel args\",\"range\":[54,101]}],\"range\":[0,102]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"hasMany\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[30,40]},{\"type\":{\"label\":\"(\"},\"range\":[40,41]},{\"type\":{\"label\":\"name\"},\"value\":\"RegionStub\",\"range\":[41,51]},{\"type\":{\"label\":\")\"},\"range\":[51,52]},{\"type\":{\"label\":\",\"},\"range\":[52,53]},{\"type\":{\"label\":\"string\"},\"value\":\"Argument needs should be the RegionModel args\",\"range\":[54,101]},{\"type\":{\"label\":\")\"},\"range\":[101,102]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument needs should be the RegionModel args');
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(DatacenterStub, "arguments/0/object/object").belongsTo, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.belongsTo.called, 'DatacenterModel.belongsTo was executed')",
    filepath: "tests/datacenter-tests.js",
    line: 194,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[22,31]},\"computed\":false,\"range\":[7,31]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[32,38]},\"computed\":false,\"range\":[7,38]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterModel.belongsTo was executed\",\"range\":[40,80]}],\"range\":[0,81]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[22,31]},{\"type\":{\"label\":\".\"},\"range\":[31,32]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[32,38]},{\"type\":{\"label\":\",\"},\"range\":[38,39]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterModel.belongsTo was executed\",\"range\":[40,80]},{\"type\":{\"label\":\")\"},\"range\":[80,81]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterModel.belongsTo was executed');
  t.true(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(DatacenterStub, "arguments/0/object/object").belongsTo, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.belongsTo.calledOnce, 'belongsTo should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 195,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[22,31]},\"computed\":false,\"range\":[7,31]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[32,42]},\"computed\":false,\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"belongsTo should be called once\",\"range\":[44,77]}],\"range\":[0,78]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[22,31]},{\"type\":{\"label\":\".\"},\"range\":[31,32]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[32,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"belongsTo should be called once\",\"range\":[44,77]},{\"type\":{\"label\":\")\"},\"range\":[77,78]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'belongsTo should be called once');
  t.true(_rec7._expr(_rec7._capt(_rec7._capt(_rec7._capt(DatacenterStub, "arguments/0/callee/object/object").belongsTo, "arguments/0/callee/object").calledWith(_rec7._capt(DatacenterMainStub, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterStub.belongsTo.calledWith(DatacenterMainStub), 'DatacenterModel.belongsTo should be called with DatacenterMainModel args')",
    filepath: "tests/datacenter-tests.js",
    line: 196,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"belongsTo\",\"range\":[22,31]},\"computed\":false,\"range\":[7,31]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[32,42]},\"computed\":false,\"range\":[7,42]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[43,61]}],\"range\":[7,62]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterModel.belongsTo should be called with DatacenterMainModel args\",\"range\":[64,138]}],\"range\":[0,139]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"belongsTo\",\"range\":[22,31]},{\"type\":{\"label\":\".\"},\"range\":[31,32]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[32,42]},{\"type\":{\"label\":\"(\"},\"range\":[42,43]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[43,61]},{\"type\":{\"label\":\")\"},\"range\":[61,62]},{\"type\":{\"label\":\",\"},\"range\":[62,63]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterModel.belongsTo should be called with DatacenterMainModel args\",\"range\":[64,138]},{\"type\":{\"label\":\")\"},\"range\":[138,139]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterModel.belongsTo should be called with DatacenterMainModel args');
});
test.serial('Datacenter#createOrUpdate - exist', async t => {
  var _rec8 = new _powerAssertRecorder(),
      _rec9 = new _powerAssertRecorder(),
      _rec10 = new _powerAssertRecorder(),
      _rec11 = new _powerAssertRecorder(),
      _rec12 = new _powerAssertRecorder(),
      _rec13 = new _powerAssertRecorder(),
      _rec14 = new _powerAssertRecorder(),
      _rec15 = new _powerAssertRecorder(),
      _rec16 = new _powerAssertRecorder();

  const datacenter = await db.Datacenter.createOrUpdate(datacenterFixtures.single, datacenterMainId);
  t.true(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 202,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMainModel.findOne was execute\",\"range\":[42,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMainModel.findOne was execute\",\"range\":[42,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMainModel.findOne was execute');
  t.true(_rec9._expr(_rec9._capt(_rec9._capt(_rec9._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 203,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMain#findOne should be called once\",\"range\":[46,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[34,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMain#findOne should be called once\",\"range\":[46,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMain#findOne should be called once');
  t.true(_rec10._expr(_rec10._capt(_rec10._capt(_rec10._capt(DatacenterMainStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec10._capt(condMainArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')",
    filepath: "tests/datacenter-tests.js",
    line: 204,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condMainArgs\",\"range\":[45,57]}],\"range\":[7,58]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condArgs args\",\"range\":[60,105]}],\"range\":[0,106]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[34,44]},{\"type\":{\"label\":\"(\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"condMainArgs\",\"range\":[45,57]},{\"type\":{\"label\":\")\"},\"range\":[57,58]},{\"type\":{\"label\":\",\"},\"range\":[58,59]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condArgs args\",\"range\":[60,105]},{\"type\":{\"label\":\")\"},\"range\":[105,106]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condArgs args');
  t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(DatacenterStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 205,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[30,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter.findOne was execute\",\"range\":[38,70]}],\"range\":[0,71]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[30,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter.findOne was execute\",\"range\":[38,70]},{\"type\":{\"label\":\")\"},\"range\":[70,71]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter.findOne was execute');
  t.true(_rec12._expr(_rec12._capt(_rec12._capt(_rec12._capt(DatacenterStub, "arguments/0/object/object").findOne, "arguments/0/object").calledTwice, "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.calledTwice, 'Datacenter#findOne should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 206,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledTwice\",\"range\":[30,41]},\"computed\":false,\"range\":[7,41]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter#findOne should be called once\",\"range\":[43,85]}],\"range\":[0,86]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledTwice\",\"range\":[30,41]},{\"type\":{\"label\":\",\"},\"range\":[41,42]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter#findOne should be called once\",\"range\":[43,85]},{\"type\":{\"label\":\")\"},\"range\":[85,86]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter#findOne should be called once');
  t.true(_rec13._expr(_rec13._capt(_rec13._capt(_rec13._capt(DatacenterStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec13._capt(condDatacenterArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.calledWith(condDatacenterArgs), 'findOne should be called with tipo Args')",
    filepath: "tests/datacenter-tests.js",
    line: 207,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condDatacenterArgs\",\"range\":[41,59]}],\"range\":[7,60]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with tipo Args\",\"range\":[62,103]}],\"range\":[0,104]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[30,40]},{\"type\":{\"label\":\"(\"},\"range\":[40,41]},{\"type\":{\"label\":\"name\"},\"value\":\"condDatacenterArgs\",\"range\":[41,59]},{\"type\":{\"label\":\")\"},\"range\":[59,60]},{\"type\":{\"label\":\",\"},\"range\":[60,61]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with tipo Args\",\"range\":[62,103]},{\"type\":{\"label\":\")\"},\"range\":[103,104]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with tipo Args');
  t.true(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(DatacenterStub, "arguments/0/object/object").update, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.update.called, 'update should be called')",
    filepath: "tests/datacenter-tests.js",
    line: 208,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[22,28]},\"computed\":false,\"range\":[7,28]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[29,35]},\"computed\":false,\"range\":[7,35]},{\"type\":\"StringLiteral\",\"value\":\"update should be called\",\"range\":[37,62]}],\"range\":[0,63]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[22,28]},{\"type\":{\"label\":\".\"},\"range\":[28,29]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[29,35]},{\"type\":{\"label\":\",\"},\"range\":[35,36]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called\",\"range\":[37,62]},{\"type\":{\"label\":\")\"},\"range\":[62,63]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called');
  t.true(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(DatacenterStub, "arguments/0/object/object").update, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.update.calledOnce, 'update should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 209,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[22,28]},\"computed\":false,\"range\":[7,28]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[29,39]},\"computed\":false,\"range\":[7,39]},{\"type\":\"StringLiteral\",\"value\":\"update should be called once\",\"range\":[41,71]}],\"range\":[0,72]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[22,28]},{\"type\":{\"label\":\".\"},\"range\":[28,29]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[29,39]},{\"type\":{\"label\":\",\"},\"range\":[39,40]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called once\",\"range\":[41,71]},{\"type\":{\"label\":\")\"},\"range\":[71,72]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called once');
  t.true(_rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(DatacenterStub, "arguments/0/callee/object/object").update, "arguments/0/callee/object").calledWith(_rec16._capt(_rec16._capt(datacenterFixtures, "arguments/0/arguments/0/object").single, "arguments/0/arguments/0"), _rec16._capt(condDatacenterArgs, "arguments/0/arguments/1")), "arguments/0"), {
    content: "t.true(DatacenterStub.update.calledWith(datacenterFixtures.single, condDatacenterArgs), 'update should be called with single, cond Args')",
    filepath: "tests/datacenter-tests.js",
    line: 210,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"update\",\"range\":[22,28]},\"computed\":false,\"range\":[7,28]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[29,39]},\"computed\":false,\"range\":[7,39]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"datacenterFixtures\",\"range\":[40,58]},\"property\":{\"type\":\"Identifier\",\"name\":\"single\",\"range\":[59,65]},\"computed\":false,\"range\":[40,65]},{\"type\":\"Identifier\",\"name\":\"condDatacenterArgs\",\"range\":[67,85]}],\"range\":[7,86]},{\"type\":\"StringLiteral\",\"value\":\"update should be called with single, cond Args\",\"range\":[88,136]}],\"range\":[0,137]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"update\",\"range\":[22,28]},{\"type\":{\"label\":\".\"},\"range\":[28,29]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[29,39]},{\"type\":{\"label\":\"(\"},\"range\":[39,40]},{\"type\":{\"label\":\"name\"},\"value\":\"datacenterFixtures\",\"range\":[40,58]},{\"type\":{\"label\":\".\"},\"range\":[58,59]},{\"type\":{\"label\":\"name\"},\"value\":\"single\",\"range\":[59,65]},{\"type\":{\"label\":\",\"},\"range\":[65,66]},{\"type\":{\"label\":\"name\"},\"value\":\"condDatacenterArgs\",\"range\":[67,85]},{\"type\":{\"label\":\")\"},\"range\":[85,86]},{\"type\":{\"label\":\",\"},\"range\":[86,87]},{\"type\":{\"label\":\"string\"},\"value\":\"update should be called with single, cond Args\",\"range\":[88,136]},{\"type\":{\"label\":\")\"},\"range\":[136,137]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'update should be called with single, cond Args');
  t.deepEqual(datacenter, datacenterFixtures.single, 'should be the same');
});
test.serial('Datacenter#createOrUpdate - new', async t => {
  var _rec17 = new _powerAssertRecorder(),
      _rec18 = new _powerAssertRecorder(),
      _rec19 = new _powerAssertRecorder(),
      _rec20 = new _powerAssertRecorder(),
      _rec21 = new _powerAssertRecorder(),
      _rec22 = new _powerAssertRecorder(),
      _rec23 = new _powerAssertRecorder(),
      _rec24 = new _powerAssertRecorder();

  const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, datacenterMainId);
  t.true(_rec17._expr(_rec17._capt(_rec17._capt(_rec17._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.called, 'DatacenterMainModel.findOne was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 218,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMainModel.findOne was execute\",\"range\":[42,83]}],\"range\":[0,84]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMainModel.findOne was execute\",\"range\":[42,83]},{\"type\":{\"label\":\")\"},\"range\":[83,84]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMainModel.findOne was execute');
  t.true(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledOnce, 'DatacenterMain#findOne should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 219,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMain#findOne should be called once\",\"range\":[46,92]}],\"range\":[0,93]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[34,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMain#findOne should be called once\",\"range\":[46,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMain#findOne should be called once');
  t.true(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(DatacenterMainStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec19._capt(condMainArgs, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledWith(condMainArgs), 'findOne should be called with condArgs args')",
    filepath: "tests/datacenter-tests.js",
    line: 220,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condMainArgs\",\"range\":[45,57]}],\"range\":[7,58]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condArgs args\",\"range\":[60,105]}],\"range\":[0,106]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[34,44]},{\"type\":{\"label\":\"(\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"condMainArgs\",\"range\":[45,57]},{\"type\":{\"label\":\")\"},\"range\":[57,58]},{\"type\":{\"label\":\",\"},\"range\":[58,59]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condArgs args\",\"range\":[60,105]},{\"type\":{\"label\":\")\"},\"range\":[105,106]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condArgs args');
  t.true(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(DatacenterStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.called, 'Datacenter.findOne was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 221,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[30,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter.findOne was execute\",\"range\":[38,70]}],\"range\":[0,71]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[30,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter.findOne was execute\",\"range\":[38,70]},{\"type\":{\"label\":\")\"},\"range\":[70,71]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter.findOne was execute');
  t.true(_rec21._expr(_rec21._capt(_rec21._capt(_rec21._capt(DatacenterStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.calledOnce, 'Datacenter#findOne should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 222,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"Datacenter#findOne should be called once\",\"range\":[42,84]}],\"range\":[0,85]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[30,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"Datacenter#findOne should be called once\",\"range\":[42,84]},{\"type\":{\"label\":\")\"},\"range\":[84,85]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'Datacenter#findOne should be called once');
  t.true(_rec22._expr(_rec22._capt(_rec22._capt(_rec22._capt(DatacenterStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec22._capt({
    where: _rec22._capt({
      datacenter: _rec22._capt(_rec22._capt(newDatacenter, "arguments/0/arguments/0/properties/0/value/properties/0/value/object").datacenter, "arguments/0/arguments/0/properties/0/value/properties/0/value")
    }, "arguments/0/arguments/0/properties/0/value")
  }, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterStub.findOne.calledWith({ where: { datacenter: newDatacenter.datacenter } }), 'findOne should be called with newDatacenter Args')",
    filepath: "tests/datacenter-tests.js",
    line: 223,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},\"arguments\":[{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"where\",\"range\":[43,48]},\"value\":{\"type\":\"ObjectExpression\",\"properties\":[{\"type\":\"ObjectProperty\",\"key\":{\"type\":\"Identifier\",\"name\":\"datacenter\",\"range\":[52,62]},\"value\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"newDatacenter\",\"range\":[64,77]},\"property\":{\"type\":\"Identifier\",\"name\":\"datacenter\",\"range\":[78,88]},\"computed\":false,\"range\":[64,88]},\"computed\":false,\"shorthand\":false,\"range\":[52,88]}],\"range\":[50,90]},\"computed\":false,\"shorthand\":false,\"range\":[43,90]}],\"range\":[41,92]}],\"range\":[7,93]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with newDatacenter Args\",\"range\":[95,145]}],\"range\":[0,146]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[30,40]},{\"type\":{\"label\":\"(\"},\"range\":[40,41]},{\"type\":{\"label\":\"{\"},\"range\":[41,42]},{\"type\":{\"label\":\"name\"},\"value\":\"where\",\"range\":[43,48]},{\"type\":{\"label\":\":\"},\"range\":[48,49]},{\"type\":{\"label\":\"{\"},\"range\":[50,51]},{\"type\":{\"label\":\"name\"},\"value\":\"datacenter\",\"range\":[52,62]},{\"type\":{\"label\":\":\"},\"range\":[62,63]},{\"type\":{\"label\":\"name\"},\"value\":\"newDatacenter\",\"range\":[64,77]},{\"type\":{\"label\":\".\"},\"range\":[77,78]},{\"type\":{\"label\":\"name\"},\"value\":\"datacenter\",\"range\":[78,88]},{\"type\":{\"label\":\"}\"},\"range\":[89,90]},{\"type\":{\"label\":\"}\"},\"range\":[91,92]},{\"type\":{\"label\":\")\"},\"range\":[92,93]},{\"type\":{\"label\":\",\"},\"range\":[93,94]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with newDatacenter Args\",\"range\":[95,145]},{\"type\":{\"label\":\")\"},\"range\":[145,146]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with newDatacenter Args');
  t.true(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(DatacenterStub, "arguments/0/object/object").create, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.create.calledOnce, 'create should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 224,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[22,28]},\"computed\":false,\"range\":[7,28]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[29,39]},\"computed\":false,\"range\":[7,39]},{\"type\":\"StringLiteral\",\"value\":\"create should be called once\",\"range\":[41,71]}],\"range\":[0,72]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[22,28]},{\"type\":{\"label\":\".\"},\"range\":[28,29]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[29,39]},{\"type\":{\"label\":\",\"},\"range\":[39,40]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called once\",\"range\":[41,71]},{\"type\":{\"label\":\")\"},\"range\":[71,72]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called once');
  t.true(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(DatacenterStub, "arguments/0/callee/object/object").create, "arguments/0/callee/object").calledWith(_rec24._capt(newDatacenter, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterStub.create.calledWith(newDatacenter), 'create should be called with newDatacenter args')",
    filepath: "tests/datacenter-tests.js",
    line: 225,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"create\",\"range\":[22,28]},\"computed\":false,\"range\":[7,28]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[29,39]},\"computed\":false,\"range\":[7,39]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"newDatacenter\",\"range\":[40,53]}],\"range\":[7,54]},{\"type\":\"StringLiteral\",\"value\":\"create should be called with newDatacenter args\",\"range\":[56,105]}],\"range\":[0,106]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"create\",\"range\":[22,28]},{\"type\":{\"label\":\".\"},\"range\":[28,29]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[29,39]},{\"type\":{\"label\":\"(\"},\"range\":[39,40]},{\"type\":{\"label\":\"name\"},\"value\":\"newDatacenter\",\"range\":[40,53]},{\"type\":{\"label\":\")\"},\"range\":[53,54]},{\"type\":{\"label\":\",\"},\"range\":[54,55]},{\"type\":{\"label\":\"string\"},\"value\":\"create should be called with newDatacenter args\",\"range\":[56,105]},{\"type\":{\"label\":\")\"},\"range\":[105,106]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'create should be called with newDatacenter args');
  t.deepEqual(datacenter, newDatacenter, 'should be the same');
});
test.serial('Datacenter#createOrUpdate - datacenterMain no exist', async t => {
  var _rec25 = new _powerAssertRecorder(),
      _rec26 = new _powerAssertRecorder(),
      _rec27 = new _powerAssertRecorder();

  const datacenter = await db.Datacenter.createOrUpdate(newDatacenter, newDatacenterMainId);
  t.true(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.called, 'DatacenterMain.findOne was execute')",
    filepath: "tests/datacenter-tests.js",
    line: 233,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[34,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"DatacenterMain.findOne was execute\",\"range\":[42,78]}],\"range\":[0,79]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[34,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"DatacenterMain.findOne was execute\",\"range\":[42,78]},{\"type\":{\"label\":\")\"},\"range\":[78,79]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'DatacenterMain.findOne was execute');
  t.true(_rec26._expr(_rec26._capt(_rec26._capt(_rec26._capt(DatacenterMainStub, "arguments/0/object/object").findOne, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledOnce, ' findOne should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 234,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},{\"type\":\"StringLiteral\",\"value\":\" findOne should be called once\",\"range\":[46,78]}],\"range\":[0,79]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[34,44]},{\"type\":{\"label\":\",\"},\"range\":[44,45]},{\"type\":{\"label\":\"string\"},\"value\":\" findOne should be called once\",\"range\":[46,78]},{\"type\":{\"label\":\")\"},\"range\":[78,79]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), ' findOne should be called once');
  t.true(_rec27._expr(_rec27._capt(_rec27._capt(_rec27._capt(DatacenterMainStub, "arguments/0/callee/object/object").findOne, "arguments/0/callee/object").calledWith(_rec27._capt(condNewDatacenterMain, "arguments/0/arguments/0")), "arguments/0"), {
    content: "t.true(DatacenterMainStub.findOne.calledWith(condNewDatacenterMain), 'findOne should be called with condNewDatacenterMain args')",
    filepath: "tests/datacenter-tests.js",
    line: 235,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterMainStub\",\"range\":[7,25]},\"property\":{\"type\":\"Identifier\",\"name\":\"findOne\",\"range\":[26,33]},\"computed\":false,\"range\":[7,33]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[34,44]},\"computed\":false,\"range\":[7,44]},\"arguments\":[{\"type\":\"Identifier\",\"name\":\"condNewDatacenterMain\",\"range\":[45,66]}],\"range\":[7,67]},{\"type\":\"StringLiteral\",\"value\":\"findOne should be called with condNewDatacenterMain args\",\"range\":[69,127]}],\"range\":[0,128]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterMainStub\",\"range\":[7,25]},{\"type\":{\"label\":\".\"},\"range\":[25,26]},{\"type\":{\"label\":\"name\"},\"value\":\"findOne\",\"range\":[26,33]},{\"type\":{\"label\":\".\"},\"range\":[33,34]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[34,44]},{\"type\":{\"label\":\"(\"},\"range\":[44,45]},{\"type\":{\"label\":\"name\"},\"value\":\"condNewDatacenterMain\",\"range\":[45,66]},{\"type\":{\"label\":\")\"},\"range\":[66,67]},{\"type\":{\"label\":\",\"},\"range\":[67,68]},{\"type\":{\"label\":\"string\"},\"value\":\"findOne should be called with condNewDatacenterMain args\",\"range\":[69,127]},{\"type\":{\"label\":\")\"},\"range\":[127,128]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findOne should be called with condNewDatacenterMain args');
  t.deepEqual(datacenter, datacenterMainFixtures.findByDatacenterMain(newDatacenterMainId), 'should be the same');
});
test.serial('Datacenter#findAll', async t => {
  var _rec28 = new _powerAssertRecorder(),
      _rec29 = new _powerAssertRecorder(),
      _rec30 = new _powerAssertRecorder();

  let datacenters = await db.Datacenter.findAll();
  t.true(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(DatacenterStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.findAll.called, 'findAll should be called')",
    filepath: "tests/datacenter-tests.js",
    line: 243,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[30,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called\",\"range\":[38,64]}],\"range\":[0,65]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[30,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called\",\"range\":[38,64]},{\"type\":{\"label\":\")\"},\"range\":[64,65]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called');
  t.true(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(DatacenterStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 244,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[42,73]}],\"range\":[0,74]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[30,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[42,73]},{\"type\":{\"label\":\")\"},\"range\":[73,74]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.true(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(DatacenterStub, "arguments/0/callee/object/object").findAll, "arguments/0/callee/object").calledWith(), "arguments/0"), {
    content: "t.true(DatacenterStub.findAll.calledWith(), 'findAll should be called without any args')",
    filepath: "tests/datacenter-tests.js",
    line: 245,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledWith\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},\"arguments\":[],\"range\":[7,42]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called without any args\",\"range\":[44,87]}],\"range\":[0,88]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledWith\",\"range\":[30,40]},{\"type\":{\"label\":\"(\"},\"range\":[40,41]},{\"type\":{\"label\":\")\"},\"range\":[41,42]},{\"type\":{\"label\":\",\"},\"range\":[42,43]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called without any args\",\"range\":[44,87]},{\"type\":{\"label\":\")\"},\"range\":[87,88]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called without any args');
  t.deepEqual(datacenters, datacenterFixtures.findAll, 'Classes should be the same');
});
test.serial('Datacenter#findByDatacenterMain', async t => {
  var _rec31 = new _powerAssertRecorder(),
      _rec32 = new _powerAssertRecorder();

  let datacenters = await db.Datacenter.findByDatacenterMain(datacenterMainId);
  t.true(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(DatacenterStub, "arguments/0/object/object").findAll, "arguments/0/object").called, "arguments/0"), {
    content: "t.true(DatacenterStub.findAll.called, 'findAll should be called')",
    filepath: "tests/datacenter-tests.js",
    line: 252,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"called\",\"range\":[30,36]},\"computed\":false,\"range\":[7,36]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called\",\"range\":[38,64]}],\"range\":[0,65]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"called\",\"range\":[30,36]},{\"type\":{\"label\":\",\"},\"range\":[36,37]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called\",\"range\":[38,64]},{\"type\":{\"label\":\")\"},\"range\":[64,65]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called');
  t.true(_rec32._expr(_rec32._capt(_rec32._capt(_rec32._capt(DatacenterStub, "arguments/0/object/object").findAll, "arguments/0/object").calledOnce, "arguments/0"), {
    content: "t.true(DatacenterStub.findAll.calledOnce, 'findAll should be called once')",
    filepath: "tests/datacenter-tests.js",
    line: 253,
    async: true,
    ast: "{\"type\":\"CallExpression\",\"callee\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"t\",\"range\":[0,1]},\"property\":{\"type\":\"Identifier\",\"name\":\"true\",\"range\":[2,6]},\"computed\":false,\"range\":[0,6]},\"arguments\":[{\"type\":\"MemberExpression\",\"object\":{\"type\":\"MemberExpression\",\"object\":{\"type\":\"Identifier\",\"name\":\"DatacenterStub\",\"range\":[7,21]},\"property\":{\"type\":\"Identifier\",\"name\":\"findAll\",\"range\":[22,29]},\"computed\":false,\"range\":[7,29]},\"property\":{\"type\":\"Identifier\",\"name\":\"calledOnce\",\"range\":[30,40]},\"computed\":false,\"range\":[7,40]},{\"type\":\"StringLiteral\",\"value\":\"findAll should be called once\",\"range\":[42,73]}],\"range\":[0,74]}",
    tokens: "[{\"type\":{\"label\":\"name\"},\"value\":\"t\",\"range\":[0,1]},{\"type\":{\"label\":\".\"},\"range\":[1,2]},{\"type\":{\"label\":\"true\"},\"value\":\"true\",\"range\":[2,6]},{\"type\":{\"label\":\"(\"},\"range\":[6,7]},{\"type\":{\"label\":\"name\"},\"value\":\"DatacenterStub\",\"range\":[7,21]},{\"type\":{\"label\":\".\"},\"range\":[21,22]},{\"type\":{\"label\":\"name\"},\"value\":\"findAll\",\"range\":[22,29]},{\"type\":{\"label\":\".\"},\"range\":[29,30]},{\"type\":{\"label\":\"name\"},\"value\":\"calledOnce\",\"range\":[30,40]},{\"type\":{\"label\":\",\"},\"range\":[40,41]},{\"type\":{\"label\":\"string\"},\"value\":\"findAll should be called once\",\"range\":[42,73]},{\"type\":{\"label\":\")\"},\"range\":[73,74]}]",
    visitorKeys: _powerAssertVisitorKeys
  }), 'findAll should be called once');
  t.deepEqual(datacenters, datacenterFixtures.findByDatacenterMainId(datacenterMainId), 'should be the same');
});
//# sourceMappingURL=/var/www/html/planner-db/node_modules/.cache/ava/002dfbf9df680222f473484b3b35171c.js.map