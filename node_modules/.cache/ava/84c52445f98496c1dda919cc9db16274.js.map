{"version":3,"sources":["tests/class-tests.js"],"names":["test","require","sinon","proxyquire","classFixtures","config","logging","db","sandbox","ClassStub","DateStub","hasMany","spy","TypeStub","belongsTo","RegionStub","DatacenterStub","DatacenterMainStub","UsersStub","TrafficStub","GbStub","CentralizedAnalysisStub","PdpStub","SauStub","ThStub","UthStub","UpdpStub","UsauStub","PdpSauStub","SauUsersStub","ThfcSauStub","ThfcPdpStub","clase","condArgs","where","newClass","nombre","beforeEach","createSandbox","findOne","stub","withArgs","returns","Promise","resolve","single","update","setupDatabase","afterEach","restore","t","truthy","ClassClase","true","called","callCount","calledWith","serial","createOrUpdate","calledTwice","calledOnce","deepEqual"],"mappings":"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","sourceRoot":"/var/www/html/planner-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst classFixtures = require('./fixtures/class')\n\nlet config = {\n  logging: function () {}\n}\n\nlet db = null\nlet sandbox = null\nlet ClassStub = null\n\n// general\nlet DateStub = {\n  hasMany: sinon.spy()\n}\nlet TypeStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet RegionStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterStub = {\n  belongsTo: sinon.spy(),\n  hasMany: sinon.spy()\n}\nlet DatacenterMainStub = {\n  hasMany: sinon.spy()\n}\n\nlet UsersStub = {\n  belongsTo: sinon.spy()\n}\nlet TrafficStub = {\n  belongsTo: sinon.spy()\n}\nlet GbStub = {\n  belongsTo: sinon.spy()\n}\nlet CentralizedAnalysisStub = {\n  belongsTo: sinon.spy()\n}\n\n// core-ps\nlet PdpStub = {\n  belongsTo: sinon.spy()\n}\nlet SauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThStub = {\n  belongsTo: sinon.spy()\n}\n\n// u2000\nlet UthStub = {\n  belongsTo: sinon.spy()\n}\nlet UpdpStub = {\n  belongsTo: sinon.spy()\n}\nlet UsauStub = {\n  belongsTo: sinon.spy()\n}\n\n// ratios\nlet PdpSauStub = {\n  belongsTo: sinon.spy()\n}\nlet SauUsersStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcSauStub = {\n  belongsTo: sinon.spy()\n}\nlet ThfcPdpStub = {\n  belongsTo: sinon.spy()\n}\n\nlet clase = 1\nlet condArgs = {\n  where: {\n    clase\n  }\n}\nlet newClass= {\n  clase: 3,\n  nombre: 'no-existes'\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  ClassStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Class#Model findOne Stub\n  ClassStub.findOne = sandbox.stub()\n  ClassStub.findOne.withArgs(condArgs).returns(Promise.resolve(classFixtures.single))\n\n  // Class#Model update Stub\n  ClassStub.update = sandbox.stub()\n  ClassStub.update.withArgs(classFixtures.single, condArgs).returns(Promise.resolve(classFixtures.single))\n\n  const setupDatabase = proxyquire('../', {\n    './models/general/users': () => UsersStub,\n    './models/general/traffic': () => TrafficStub,\n    './models/general/gb': () => GbStub,\n    './models/general/centralized_analysis': () => CentralizedAnalysisStub,\n\n    './models/general/date': () => DateStub,\n    './models/general/type': () => TypeStub,\n    './models/general/class': () => ClassStub,\n    './models/general/region': () => RegionStub,\n    './models/general/datacenter': () => DatacenterStub,\n    './models/general/datacenter_main': () => DatacenterMainStub,\n\n    './models/core-ps/pdp': () => PdpStub,\n    './models/core-ps/sau': () => SauStub,\n    './models/core-ps/th': () => ThStub,\n\n    './models/u2000/th': () => UthStub,\n    './models/u2000/pdp': () => UpdpStub,\n    './models/u2000/sau': () => UsauStub,\n\n    './models/ratios/pdp_ sau': () => PdpSauStub,\n    './models/ratios/sau_users': () => SauUsersStub,\n    './models/ratios/thfc_sau': () => ThfcSauStub,\n    './models/ratios/thfc_pdp': () => ThfcPdpStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sandbox.restore()\n})\n\ntest('Class', t => {\n  t.truthy(db.ClassClase, 'Class service should exits.')\n})\n\ntest('Setup', t => {\n  t.true(ClassStub.hasMany.called, 'ClassModel.hasMany was executed')\n  t.true(ClassStub.hasMany.callCount === 13, 'hasMany should be called 13 times')\n  t.true(ClassStub.hasMany.calledWith(TypeStub), 'Argument needs should be TypeModel')\n  t.true(ClassStub.hasMany.calledWith(GbStub), 'Argument needs should be GbModel')\n  t.true(ClassStub.hasMany.calledWith(CentralizedAnalysisStub), 'Argument needs should be CentralizedAnalysisModel')\n  t.true(ClassStub.hasMany.calledWith(ThStub), 'Argument needs should be ThModel')\n  t.true(ClassStub.hasMany.calledWith(SauStub), 'Argument needs should be SauModel')\n  t.true(ClassStub.hasMany.calledWith(PdpStub), 'Argument needs should be PdpModel')\n  t.true(ClassStub.hasMany.calledWith(UthStub), 'Argument needs should be UthModel')\n  t.true(ClassStub.hasMany.calledWith(UsauStub), 'Argument needs should be UsauModel')\n  t.true(ClassStub.hasMany.calledWith(UpdpStub), 'Argument needs should be UpdpModel')\n  t.true(ClassStub.hasMany.calledWith(SauUsersStub), 'Argument needs should be SauUsersModel')\n  t.true(ClassStub.hasMany.calledWith(PdpSauStub), 'Argument needs should be PdpSauModel')\n  t.true(ClassStub.hasMany.calledWith(ThfcPdpStub), 'Argument needs should be ThfcPdpModel')\n  t.true(ClassStub.hasMany.calledWith(ThfcSauStub), 'Argument needs should be ThfcSauModel')\n})\n\ntest.serial('Class#createOrUpdate - exists', async t => {\n  let clase = await db.ClassClase.createOrUpdate(classFixtures.single)\n\n  t.true(ClassStub.findOne.called, 'findOne should be called on model')\n  t.true(ClassStub.findOne.calledTwice, 'findOne should be called twice')\n  t.true(ClassStub.findOne.calledWith(condArgs), 'findOne should be called with cond Args')\n  t.true(ClassStub.update.called, 'update should be called')\n  t.true(ClassStub.update.calledOnce, 'update should be called once'),\n  t.true(ClassStub.update.calledWith(classFixtures.single , condArgs), 'update should be called with single, cond Args')\n\n  t.deepEqual(clase, classFixtures.single, 'should be the same')\n})\n\ntest.serial('Class#createOrUpdate - new', async t => {\n  let clase = await db.ClassClase.createOrUpdate(newClass)\n\n  t.deepEqual(clase, newClass, 'should be the same')\n})\n"]}